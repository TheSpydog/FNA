#region License
/* FNA - XNA4 Reimplementation for Desktop Platforms
 * Copyright 2009-2019 Ethan Lee and the MonoGame Team
 *
 * Released under the Microsoft Public License.
 * See LICENSE for details.
 */
#endregion

#region Using Statements
using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using SDL2;
#endregion

namespace Microsoft.Xna.Framework.Graphics
{
	internal partial class VulkanDevice : IGLDevice
	{
		#region Private Enums

		// FIXME: Prune this big boi to just what we use.
		private enum VkStructureType
		{
			VK_STRUCTURE_TYPE_APPLICATION_INFO = 0,
			VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO = 1,
			VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO = 2,
			VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO = 3,
			VK_STRUCTURE_TYPE_SUBMIT_INFO = 4,
			VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO = 5,
			VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE = 6,
			VK_STRUCTURE_TYPE_BIND_SPARSE_INFO = 7,
			VK_STRUCTURE_TYPE_FENCE_CREATE_INFO = 8,
			VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO = 9,
			VK_STRUCTURE_TYPE_EVENT_CREATE_INFO = 10,
			VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO = 11,
			VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO = 12,
			VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO = 13,
			VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO = 14,
			VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO = 15,
			VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO = 16,
			VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO = 17,
			VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO = 18,
			VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO = 19,
			VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO = 20,
			VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO = 21,
			VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO = 22,
			VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO = 23,
			VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO = 24,
			VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO = 25,
			VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO = 26,
			VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO = 27,
			VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO = 28,
			VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO = 29,
			VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO = 30,
			VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO = 31,
			VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO = 32,
			VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO = 33,
			VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO = 34,
			VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET = 35,
			VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET = 36,
			VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO = 37,
			VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO = 38,
			VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO = 39,
			VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO = 40,
			VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO = 41,
			VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO = 42,
			VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO = 43,
			VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER = 44,
			VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER = 45,
			VK_STRUCTURE_TYPE_MEMORY_BARRIER = 46,
			VK_STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO = 47,
			VK_STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO = 48,
			VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_PROPERTIES = 1000094000,
			VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO = 1000157000,
			VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO = 1000157001,
			VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES = 1000083000,
			VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS = 1000127000,
			VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO = 1000127001,
			VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO = 1000060000,
			VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO = 1000060003,
			VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO = 1000060004,
			VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO = 1000060005,
			VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO = 1000060006,
			VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO = 1000060013,
			VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO = 1000060014,
			VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES = 1000070000,
			VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO = 1000070001,
			VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2 = 1000146000,
			VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2 = 1000146001,
			VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2 = 1000146002,
			VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2 = 1000146003,
			VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2 = 1000146004,
			VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2 = 1000059000,
			VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2 = 1000059001,
			VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2 = 1000059002,
			VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2 = 1000059003,
			VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2 = 1000059004,
			VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2 = 1000059005,
			VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2 = 1000059006,
			VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2 = 1000059007,
			VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2 = 1000059008,
			VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES = 1000117000,
			VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO = 1000117001,
			VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO = 1000117002,
			VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO = 1000117003,
			VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO = 1000053000,
			VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES = 1000053001,
			VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES = 1000053002,
			VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES = 1000120000,
			VK_STRUCTURE_TYPE_PROTECTED_SUBMIT_INFO = 1000145000,
			VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES = 1000145001,
			VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_PROPERTIES = 1000145002,
			VK_STRUCTURE_TYPE_DEVICE_QUEUE_INFO_2 = 1000145003,
			VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO = 1000156000,
			VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO = 1000156001,
			VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO = 1000156002,
			VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO = 1000156003,
			VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES = 1000156004,
			VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES = 1000156005,
			VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO = 1000085000,
			VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO = 1000071000,
			VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES = 1000071001,
			VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO = 1000071002,
			VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES = 1000071003,
			VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES = 1000071004,
			VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO = 1000072000,
			VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO = 1000072001,
			VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO = 1000072002,
			VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO = 1000112000,
			VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES = 1000112001,
			VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO = 1000113000,
			VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO = 1000077000,
			VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO = 1000076000,
			VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES = 1000076001,
			VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES = 1000168000,
			VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT = 1000168001,
			VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES = 1000063000,
			VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR = 1000001000,
			VK_STRUCTURE_TYPE_PRESENT_INFO_KHR = 1000001001,
			VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_CAPABILITIES_KHR = 1000060007,
			VK_STRUCTURE_TYPE_IMAGE_SWAPCHAIN_CREATE_INFO_KHR = 1000060008,
			VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR = 1000060009,
			VK_STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHR = 1000060010,
			VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_INFO_KHR = 1000060011,
			VK_STRUCTURE_TYPE_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR = 1000060012,
			VK_STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR = 1000002000,
			VK_STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR = 1000002001,
			VK_STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR = 1000003000,
			VK_STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR = 1000004000,
			VK_STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR = 1000005000,
			VK_STRUCTURE_TYPE_WAYLAND_SURFACE_CREATE_INFO_KHR = 1000006000,
			VK_STRUCTURE_TYPE_ANDROID_SURFACE_CREATE_INFO_KHR = 1000008000,
			VK_STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR = 1000009000,
			VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT = 1000011000,
			VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_RASTERIZATION_ORDER_AMD = 1000018000,
			VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_NAME_INFO_EXT = 1000022000,
			VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_TAG_INFO_EXT = 1000022001,
			VK_STRUCTURE_TYPE_DEBUG_MARKER_MARKER_INFO_EXT = 1000022002,
			VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_IMAGE_CREATE_INFO_NV = 1000026000,
			VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_BUFFER_CREATE_INFO_NV = 1000026001,
			VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_MEMORY_ALLOCATE_INFO_NV = 1000026002,
			VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_FEATURES_EXT = 1000028000,
			VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_PROPERTIES_EXT = 1000028001,
			VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_STREAM_CREATE_INFO_EXT = 1000028002,
			VK_STRUCTURE_TYPE_IMAGE_VIEW_HANDLE_INFO_NVX = 1000030000,
			VK_STRUCTURE_TYPE_TEXTURE_LOD_GATHER_FORMAT_PROPERTIES_AMD = 1000041000,
			VK_STRUCTURE_TYPE_STREAM_DESCRIPTOR_SURFACE_CREATE_INFO_GGP = 1000049000,
			VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CORNER_SAMPLED_IMAGE_FEATURES_NV = 1000050000,
			VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_NV = 1000056000,
			VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_NV = 1000056001,
			VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_NV = 1000057000,
			VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_NV = 1000057001,
			VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_NV = 1000058000,
			VK_STRUCTURE_TYPE_VALIDATION_FLAGS_EXT = 1000061000,
			VK_STRUCTURE_TYPE_VI_SURFACE_CREATE_INFO_NN = 1000062000,
			VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES_EXT = 1000066000,
			VK_STRUCTURE_TYPE_IMAGE_VIEW_ASTC_DECODE_MODE_EXT = 1000067000,
			VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ASTC_DECODE_FEATURES_EXT = 1000067001,
			VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_KHR = 1000073000,
			VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_KHR = 1000073001,
			VK_STRUCTURE_TYPE_MEMORY_WIN32_HANDLE_PROPERTIES_KHR = 1000073002,
			VK_STRUCTURE_TYPE_MEMORY_GET_WIN32_HANDLE_INFO_KHR = 1000073003,
			VK_STRUCTURE_TYPE_IMPORT_MEMORY_FD_INFO_KHR = 1000074000,
			VK_STRUCTURE_TYPE_MEMORY_FD_PROPERTIES_KHR = 1000074001,
			VK_STRUCTURE_TYPE_MEMORY_GET_FD_INFO_KHR = 1000074002,
			VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_KHR = 1000075000,
			VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR = 1000078000,
			VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR = 1000078001,
			VK_STRUCTURE_TYPE_D3D12_FENCE_SUBMIT_INFO_KHR = 1000078002,
			VK_STRUCTURE_TYPE_SEMAPHORE_GET_WIN32_HANDLE_INFO_KHR = 1000078003,
			VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_FD_INFO_KHR = 1000079000,
			VK_STRUCTURE_TYPE_SEMAPHORE_GET_FD_INFO_KHR = 1000079001,
			VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES_KHR = 1000080000,
			VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_CONDITIONAL_RENDERING_INFO_EXT = 1000081000,
			VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONDITIONAL_RENDERING_FEATURES_EXT = 1000081001,
			VK_STRUCTURE_TYPE_CONDITIONAL_RENDERING_BEGIN_INFO_EXT = 1000081002,
			VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES_KHR = 1000082000,
			VK_STRUCTURE_TYPE_PRESENT_REGIONS_KHR = 1000084000,
			VK_STRUCTURE_TYPE_OBJECT_TABLE_CREATE_INFO_NVX = 1000086000,
			VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_NVX = 1000086001,
			VK_STRUCTURE_TYPE_CMD_PROCESS_COMMANDS_INFO_NVX = 1000086002,
			VK_STRUCTURE_TYPE_CMD_RESERVE_SPACE_FOR_COMMANDS_INFO_NVX = 1000086003,
			VK_STRUCTURE_TYPE_DEVICE_GENERATED_COMMANDS_LIMITS_NVX = 1000086004,
			VK_STRUCTURE_TYPE_DEVICE_GENERATED_COMMANDS_FEATURES_NVX = 1000086005,
			VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_W_SCALING_STATE_CREATE_INFO_NV = 1000087000,
			VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_EXT = 1000090000,
			VK_STRUCTURE_TYPE_DISPLAY_POWER_INFO_EXT = 1000091000,
			VK_STRUCTURE_TYPE_DEVICE_EVENT_INFO_EXT = 1000091001,
			VK_STRUCTURE_TYPE_DISPLAY_EVENT_INFO_EXT = 1000091002,
			VK_STRUCTURE_TYPE_SWAPCHAIN_COUNTER_CREATE_INFO_EXT = 1000091003,
			VK_STRUCTURE_TYPE_PRESENT_TIMES_INFO_GOOGLE = 1000092000,
			VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_ATTRIBUTES_PROPERTIES_NVX = 1000097000,
			VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SWIZZLE_STATE_CREATE_INFO_NV = 1000098000,
			VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DISCARD_RECTANGLE_PROPERTIES_EXT = 1000099000,
			VK_STRUCTURE_TYPE_PIPELINE_DISCARD_RECTANGLE_STATE_CREATE_INFO_EXT = 1000099001,
			VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONSERVATIVE_RASTERIZATION_PROPERTIES_EXT = 1000101000,
			VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_CONSERVATIVE_STATE_CREATE_INFO_EXT = 1000101001,
			VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_ENABLE_FEATURES_EXT = 1000102000,
			VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_DEPTH_CLIP_STATE_CREATE_INFO_EXT = 1000102001,
			VK_STRUCTURE_TYPE_HDR_METADATA_EXT = 1000105000,
			VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES_KHR = 1000108000,
			VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO_KHR = 1000108001,
			VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO_KHR = 1000108002,
			VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO_KHR = 1000108003,
			VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2_KHR = 1000109000,
			VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2_KHR = 1000109001,
			VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2_KHR = 1000109002,
			VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2_KHR = 1000109003,
			VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2_KHR = 1000109004,
			VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO_KHR = 1000109005,
			VK_STRUCTURE_TYPE_SUBPASS_END_INFO_KHR = 1000109006,
			VK_STRUCTURE_TYPE_SHARED_PRESENT_SURFACE_CAPABILITIES_KHR = 1000111000,
			VK_STRUCTURE_TYPE_IMPORT_FENCE_WIN32_HANDLE_INFO_KHR = 1000114000,
			VK_STRUCTURE_TYPE_EXPORT_FENCE_WIN32_HANDLE_INFO_KHR = 1000114001,
			VK_STRUCTURE_TYPE_FENCE_GET_WIN32_HANDLE_INFO_KHR = 1000114002,
			VK_STRUCTURE_TYPE_IMPORT_FENCE_FD_INFO_KHR = 1000115000,
			VK_STRUCTURE_TYPE_FENCE_GET_FD_INFO_KHR = 1000115001,
			VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SURFACE_INFO_2_KHR = 1000119000,
			VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_KHR = 1000119001,
			VK_STRUCTURE_TYPE_SURFACE_FORMAT_2_KHR = 1000119002,
			VK_STRUCTURE_TYPE_DISPLAY_PROPERTIES_2_KHR = 1000121000,
			VK_STRUCTURE_TYPE_DISPLAY_PLANE_PROPERTIES_2_KHR = 1000121001,
			VK_STRUCTURE_TYPE_DISPLAY_MODE_PROPERTIES_2_KHR = 1000121002,
			VK_STRUCTURE_TYPE_DISPLAY_PLANE_INFO_2_KHR = 1000121003,
			VK_STRUCTURE_TYPE_DISPLAY_PLANE_CAPABILITIES_2_KHR = 1000121004,
			VK_STRUCTURE_TYPE_IOS_SURFACE_CREATE_INFO_MVK = 1000122000,
			VK_STRUCTURE_TYPE_MACOS_SURFACE_CREATE_INFO_MVK = 1000123000,
			VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT = 1000128000,
			VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_TAG_INFO_EXT = 1000128001,
			VK_STRUCTURE_TYPE_DEBUG_UTILS_LABEL_EXT = 1000128002,
			VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT = 1000128003,
			VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT = 1000128004,
			VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_USAGE_ANDROID = 1000129000,
			VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_PROPERTIES_ANDROID = 1000129001,
			VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_ANDROID = 1000129002,
			VK_STRUCTURE_TYPE_IMPORT_ANDROID_HARDWARE_BUFFER_INFO_ANDROID = 1000129003,
			VK_STRUCTURE_TYPE_MEMORY_GET_ANDROID_HARDWARE_BUFFER_INFO_ANDROID = 1000129004,
			VK_STRUCTURE_TYPE_EXTERNAL_FORMAT_ANDROID = 1000129005,
			VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES_EXT = 1000130000,
			VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO_EXT = 1000130001,
			VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES_EXT = 1000138000,
			VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES_EXT = 1000138001,
			VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK_EXT = 1000138002,
			VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO_EXT = 1000138003,
			VK_STRUCTURE_TYPE_SAMPLE_LOCATIONS_INFO_EXT = 1000143000,
			VK_STRUCTURE_TYPE_RENDER_PASS_SAMPLE_LOCATIONS_BEGIN_INFO_EXT = 1000143001,
			VK_STRUCTURE_TYPE_PIPELINE_SAMPLE_LOCATIONS_STATE_CREATE_INFO_EXT = 1000143002,
			VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLE_LOCATIONS_PROPERTIES_EXT = 1000143003,
			VK_STRUCTURE_TYPE_MULTISAMPLE_PROPERTIES_EXT = 1000143004,
			VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO_KHR = 1000147000,
			VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_FEATURES_EXT = 1000148000,
			VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_PROPERTIES_EXT = 1000148001,
			VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_ADVANCED_STATE_CREATE_INFO_EXT = 1000148002,
			VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_TO_COLOR_STATE_CREATE_INFO_NV = 1000149000,
			VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_MODULATION_STATE_CREATE_INFO_NV = 1000152000,
			VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_FEATURES_NV = 1000154000,
			VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_PROPERTIES_NV = 1000154001,
			VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_EXT = 1000158000,
			VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT = 1000158001,
			VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_DRM_FORMAT_MODIFIER_INFO_EXT = 1000158002,
			VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_LIST_CREATE_INFO_EXT = 1000158003,
			VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_EXPLICIT_CREATE_INFO_EXT = 1000158004,
			VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT = 1000158005,
			VK_STRUCTURE_TYPE_VALIDATION_CACHE_CREATE_INFO_EXT = 1000160000,
			VK_STRUCTURE_TYPE_SHADER_MODULE_VALIDATION_CACHE_CREATE_INFO_EXT = 1000160001,
			VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO_EXT = 1000161000,
			VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES_EXT = 1000161001,
			VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES_EXT = 1000161002,
			VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO_EXT = 1000161003,
			VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT_EXT = 1000161004,
			VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SHADING_RATE_IMAGE_STATE_CREATE_INFO_NV = 1000164000,
			VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_FEATURES_NV = 1000164001,
			VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_PROPERTIES_NV = 1000164002,
			VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_COARSE_SAMPLE_ORDER_STATE_CREATE_INFO_NV = 1000164005,
			VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_NV = 1000165000,
			VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_NV = 1000165001,
			VK_STRUCTURE_TYPE_GEOMETRY_NV = 1000165003,
			VK_STRUCTURE_TYPE_GEOMETRY_TRIANGLES_NV = 1000165004,
			VK_STRUCTURE_TYPE_GEOMETRY_AABB_NV = 1000165005,
			VK_STRUCTURE_TYPE_BIND_ACCELERATION_STRUCTURE_MEMORY_INFO_NV = 1000165006,
			VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_NV = 1000165007,
			VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_NV = 1000165008,
			VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PROPERTIES_NV = 1000165009,
			VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_NV = 1000165011,
			VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_INFO_NV = 1000165012,
			VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_REPRESENTATIVE_FRAGMENT_TEST_FEATURES_NV = 1000166000,
			VK_STRUCTURE_TYPE_PIPELINE_REPRESENTATIVE_FRAGMENT_TEST_STATE_CREATE_INFO_NV = 1000166001,
			VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_IMAGE_FORMAT_INFO_EXT = 1000170000,
			VK_STRUCTURE_TYPE_FILTER_CUBIC_IMAGE_VIEW_IMAGE_FORMAT_PROPERTIES_EXT = 1000170001,
			VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_EXT = 1000174000,
			VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES_KHR = 1000177000,
			VK_STRUCTURE_TYPE_IMPORT_MEMORY_HOST_POINTER_INFO_EXT = 1000178000,
			VK_STRUCTURE_TYPE_MEMORY_HOST_POINTER_PROPERTIES_EXT = 1000178001,
			VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_HOST_PROPERTIES_EXT = 1000178002,
			VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES_KHR = 1000180000,
			VK_STRUCTURE_TYPE_PIPELINE_COMPILER_CONTROL_CREATE_INFO_AMD = 1000183000,
			VK_STRUCTURE_TYPE_CALIBRATED_TIMESTAMP_INFO_EXT = 1000184000,
			VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_AMD = 1000185000,
			VK_STRUCTURE_TYPE_DEVICE_MEMORY_OVERALLOCATION_CREATE_INFO_AMD = 1000189000,
			VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_EXT = 1000190000,
			VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_EXT = 1000190001,
			VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_EXT = 1000190002,
			VK_STRUCTURE_TYPE_PRESENT_FRAME_TOKEN_GGP = 1000191000,
			VK_STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO_EXT = 1000192000,
			VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES_KHR = 1000196000,
			VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES_KHR = 1000197000,
			VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES_KHR = 1000199000,
			VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE_KHR = 1000199001,
			VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_FEATURES_NV = 1000201000,
			VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_NV = 1000202000,
			VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_NV = 1000202001,
			VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_NV = 1000203000,
			VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_FOOTPRINT_FEATURES_NV = 1000204000,
			VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_EXCLUSIVE_SCISSOR_STATE_CREATE_INFO_NV = 1000205000,
			VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXCLUSIVE_SCISSOR_FEATURES_NV = 1000205002,
			VK_STRUCTURE_TYPE_CHECKPOINT_DATA_NV = 1000206000,
			VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_NV = 1000206001,
			VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_FUNCTIONS_2_FEATURES_INTEL = 1000209000,
			VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL = 1000210000,
			VK_STRUCTURE_TYPE_INITIALIZE_PERFORMANCE_API_INFO_INTEL = 1000210001,
			VK_STRUCTURE_TYPE_PERFORMANCE_MARKER_INFO_INTEL = 1000210002,
			VK_STRUCTURE_TYPE_PERFORMANCE_STREAM_MARKER_INFO_INTEL = 1000210003,
			VK_STRUCTURE_TYPE_PERFORMANCE_OVERRIDE_INFO_INTEL = 1000210004,
			VK_STRUCTURE_TYPE_PERFORMANCE_CONFIGURATION_ACQUIRE_INFO_INTEL = 1000210005,
			VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES_KHR = 1000211000,
			VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PCI_BUS_INFO_PROPERTIES_EXT = 1000212000,
			VK_STRUCTURE_TYPE_DISPLAY_NATIVE_HDR_SURFACE_CAPABILITIES_AMD = 1000213000,
			VK_STRUCTURE_TYPE_SWAPCHAIN_DISPLAY_NATIVE_HDR_CREATE_INFO_AMD = 1000213001,
			VK_STRUCTURE_TYPE_IMAGEPIPE_SURFACE_CREATE_INFO_FUCHSIA = 1000214000,
			VK_STRUCTURE_TYPE_METAL_SURFACE_CREATE_INFO_EXT = 1000217000,
			VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_FEATURES_EXT = 1000218000,
			VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_PROPERTIES_EXT = 1000218001,
			VK_STRUCTURE_TYPE_RENDER_PASS_FRAGMENT_DENSITY_MAP_CREATE_INFO_EXT = 1000218002,
			VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES_EXT = 1000221000,
			VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES_EXT = 1000225000,
			VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO_EXT = 1000225001,
			VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES_EXT = 1000225002,
			VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_2_AMD = 1000227000,
			VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COHERENT_MEMORY_FEATURES_AMD = 1000229000,
			VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_BUDGET_PROPERTIES_EXT = 1000237000,
			VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PRIORITY_FEATURES_EXT = 1000238000,
			VK_STRUCTURE_TYPE_MEMORY_PRIORITY_ALLOCATE_INFO_EXT = 1000238001,
			VK_STRUCTURE_TYPE_SURFACE_PROTECTED_CAPABILITIES_KHR = 1000239000,
			VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEDICATED_ALLOCATION_IMAGE_ALIASING_FEATURES_NV = 1000240000,
			VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_EXT = 1000244000,
			VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO_EXT = 1000244001,
			VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_CREATE_INFO_EXT = 1000244002,
			VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO_EXT = 1000246000,
			VK_STRUCTURE_TYPE_VALIDATION_FEATURES_EXT = 1000247000,
			VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_NV = 1000249000,
			VK_STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_NV = 1000249001,
			VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_NV = 1000249002,
			VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COVERAGE_REDUCTION_MODE_FEATURES_NV = 1000250000,
			VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_REDUCTION_STATE_CREATE_INFO_NV = 1000250001,
			VK_STRUCTURE_TYPE_FRAMEBUFFER_MIXED_SAMPLES_COMBINATION_NV = 1000250002,
			VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_INTERLOCK_FEATURES_EXT = 1000251000,
			VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_IMAGE_ARRAYS_FEATURES_EXT = 1000252000,
			VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES_KHR = 1000253000,
			VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_INFO_EXT = 1000255000,
			VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_FULL_SCREEN_EXCLUSIVE_EXT = 1000255002,
			VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_WIN32_INFO_EXT = 1000255001,
			VK_STRUCTURE_TYPE_HEADLESS_SURFACE_CREATE_INFO_EXT = 1000256000,
			VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES_EXT = 1000259000,
			VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO_EXT = 1000259001,
			VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES_EXT = 1000259002,
			VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES_EXT = 1000261000,
			VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES_EXT = 1000265000,
			VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_EXECUTABLE_PROPERTIES_FEATURES_KHR = 1000269000,
			VK_STRUCTURE_TYPE_PIPELINE_INFO_KHR = 1000269001,
			VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_PROPERTIES_KHR = 1000269002,
			VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INFO_KHR = 1000269003,
			VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_STATISTIC_KHR = 1000269004,
			VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INTERNAL_REPRESENTATION_KHR = 1000269005,
			VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES_EXT = 1000276000,
			VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_FEATURES_EXT = 1000281000,
			VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES_EXT = 1000281001,
			VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES,
			VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETER_FEATURES = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES,
			VK_STRUCTURE_TYPE_DEBUG_REPORT_CREATE_INFO_EXT = VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT,
			VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO,
			VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES,
			VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES,
			VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2,
			VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2,
			VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2_KHR = VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2,
			VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2_KHR = VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2,
			VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2,
			VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2_KHR = VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2,
			VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2,
			VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2_KHR = VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2,
			VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2,
			VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO_KHR = VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO,
			VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO_KHR = VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO,
			VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO_KHR = VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO,
			VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO_KHR = VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO,
			VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO_KHR = VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO,
			VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO_KHR = VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO,
			VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO_KHR = VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO,
			VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES,
			VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO,
			VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO,
			VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES_KHR = VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES,
			VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO,
			VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES_KHR = VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES,
			VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES,
			VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO,
			VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO,
			VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_KHR = VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO,
			VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO,
			VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES_KHR = VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES,
			VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO,
			VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT16_INT8_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES_KHR,
			VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES,
			VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO,
			VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES2_EXT = VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_EXT,
			VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO,
			VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES_KHR = VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES,
			VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO,
			VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES,
			VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO,
			VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO,
			VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO,
			VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES,
			VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES,
			VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS_KHR = VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS,
			VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO_KHR = VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO,
			VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2_KHR = VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2,
			VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2_KHR = VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2,
			VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2_KHR = VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2,
			VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2_KHR = VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2,
			VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2_KHR = VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2,
			VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO,
			VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO_KHR = VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO,
			VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO_KHR = VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO,
			VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO_KHR = VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO,
			VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES,
			VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES_KHR = VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES,
			VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO_KHR = VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO,
			VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO_KHR = VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO,
			VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES,
			VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT_KHR = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT,
			VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_ADDRESS_FEATURES_EXT = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_EXT,
			VK_STRUCTURE_TYPE_MAX_ENUM = 0x7FFFFFFF
		}

		private enum VkResult
		{
			VK_SUCCESS = 0,
			VK_NOT_READY = 1,
			VK_TIMEOUT = 2,
			VK_EVENT_SET = 3,
			VK_EVENT_RESET = 4,
			VK_INCOMPLETE = 5,
			VK_ERROR_OUT_OF_HOST_MEMORY = -1,
			VK_ERROR_OUT_OF_DEVICE_MEMORY = -2,
			VK_ERROR_INITIALIZATION_FAILED = -3,
			VK_ERROR_DEVICE_LOST = -4,
			VK_ERROR_MEMORY_MAP_FAILED = -5,
			VK_ERROR_LAYER_NOT_PRESENT = -6,
			VK_ERROR_EXTENSION_NOT_PRESENT = -7,
			VK_ERROR_FEATURE_NOT_PRESENT = -8,
			VK_ERROR_INCOMPATIBLE_DRIVER = -9,
			VK_ERROR_TOO_MANY_OBJECTS = -10,
			VK_ERROR_FORMAT_NOT_SUPPORTED = -11,
			VK_ERROR_FRAGMENTED_POOL = -12,
			VK_ERROR_OUT_OF_POOL_MEMORY = -1000069000,
			VK_ERROR_INVALID_EXTERNAL_HANDLE = -1000072003,
			VK_ERROR_SURFACE_LOST_KHR = -1000000000,
			VK_ERROR_NATIVE_WINDOW_IN_USE_KHR = -1000000001,
			VK_SUBOPTIMAL_KHR = 1000001003,
			VK_ERROR_OUT_OF_DATE_KHR = -1000001004,
			VK_ERROR_INCOMPATIBLE_DISPLAY_KHR = -1000003001,
			VK_ERROR_VALIDATION_FAILED_EXT = -1000011001,
			VK_ERROR_INVALID_SHADER_NV = -1000012000,
			VK_ERROR_INVALID_DRM_FORMAT_MODIFIER_PLANE_LAYOUT_EXT = -1000158000,
			VK_ERROR_FRAGMENTATION_EXT = -1000161000,
			VK_ERROR_NOT_PERMITTED_EXT = -1000174001,
			VK_ERROR_INVALID_DEVICE_ADDRESS_EXT = -1000244000,
			VK_ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT = -1000255000,
			VK_ERROR_OUT_OF_POOL_MEMORY_KHR = VK_ERROR_OUT_OF_POOL_MEMORY,
			VK_ERROR_INVALID_EXTERNAL_HANDLE_KHR = VK_ERROR_INVALID_EXTERNAL_HANDLE,
			VK_RESULT_MAX_ENUM = 0x7FFFFFFF
		}

		private enum VkDebugUtilsMessageSeverityFlagsEXT
		{
			VK_DEBUG_UTILS_MESSAGE_SEVERITY_VERBOSE_BIT_EXT = 0x00000001,
			VK_DEBUG_UTILS_MESSAGE_SEVERITY_INFO_BIT_EXT = 0x00000010,
			VK_DEBUG_UTILS_MESSAGE_SEVERITY_WARNING_BIT_EXT = 0x00000100,
			VK_DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT = 0x00001000,
			VK_DEBUG_UTILS_MESSAGE_SEVERITY_FLAG_BITS_MAX_ENUM_EXT = 0x7FFFFFFF
		}

		private enum VkDebugUtilsMessageTypeFlagsEXT
		{
			VK_DEBUG_UTILS_MESSAGE_TYPE_GENERAL_BIT_EXT = 0x00000001,
			VK_DEBUG_UTILS_MESSAGE_TYPE_VALIDATION_BIT_EXT = 0x00000002,
			VK_DEBUG_UTILS_MESSAGE_TYPE_PERFORMANCE_BIT_EXT = 0x00000004,
			VK_DEBUG_UTILS_MESSAGE_TYPE_FLAG_BITS_MAX_ENUM_EXT = 0x7FFFFFFF
		}

		private enum VkObjectType
		{
			VK_OBJECT_TYPE_UNKNOWN = 0,
			VK_OBJECT_TYPE_INSTANCE = 1,
			VK_OBJECT_TYPE_PHYSICAL_DEVICE = 2,
			VK_OBJECT_TYPE_DEVICE = 3,
			VK_OBJECT_TYPE_QUEUE = 4,
			VK_OBJECT_TYPE_SEMAPHORE = 5,
			VK_OBJECT_TYPE_COMMAND_BUFFER = 6,
			VK_OBJECT_TYPE_FENCE = 7,
			VK_OBJECT_TYPE_DEVICE_MEMORY = 8,
			VK_OBJECT_TYPE_BUFFER = 9,
			VK_OBJECT_TYPE_IMAGE = 10,
			VK_OBJECT_TYPE_EVENT = 11,
			VK_OBJECT_TYPE_QUERY_POOL = 12,
			VK_OBJECT_TYPE_BUFFER_VIEW = 13,
			VK_OBJECT_TYPE_IMAGE_VIEW = 14,
			VK_OBJECT_TYPE_SHADER_MODULE = 15,
			VK_OBJECT_TYPE_PIPELINE_CACHE = 16,
			VK_OBJECT_TYPE_PIPELINE_LAYOUT = 17,
			VK_OBJECT_TYPE_RENDER_PASS = 18,
			VK_OBJECT_TYPE_PIPELINE = 19,
			VK_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT = 20,
			VK_OBJECT_TYPE_SAMPLER = 21,
			VK_OBJECT_TYPE_DESCRIPTOR_POOL = 22,
			VK_OBJECT_TYPE_DESCRIPTOR_SET = 23,
			VK_OBJECT_TYPE_FRAMEBUFFER = 24,
			VK_OBJECT_TYPE_COMMAND_POOL = 25,
			VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION = 1000156000,
			VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE = 1000085000,
			VK_OBJECT_TYPE_SURFACE_KHR = 1000000000,
			VK_OBJECT_TYPE_SWAPCHAIN_KHR = 1000001000,
			VK_OBJECT_TYPE_DISPLAY_KHR = 1000002000,
			VK_OBJECT_TYPE_DISPLAY_MODE_KHR = 1000002001,
			VK_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT = 1000011000,
			VK_OBJECT_TYPE_OBJECT_TABLE_NVX = 1000086000,
			VK_OBJECT_TYPE_INDIRECT_COMMANDS_LAYOUT_NVX = 1000086001,
			VK_OBJECT_TYPE_DEBUG_UTILS_MESSENGER_EXT = 1000128000,
			VK_OBJECT_TYPE_VALIDATION_CACHE_EXT = 1000160000,
			VK_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV = 1000165000,
			VK_OBJECT_TYPE_PERFORMANCE_CONFIGURATION_INTEL = 1000210000,
			VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR = VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE,
			VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR = VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION,
			VK_OBJECT_TYPE_MAX_ENUM = 0x7FFFFFFF
		}

		private enum VkPhysicalDeviceType
		{
			VK_PHYSICAL_DEVICE_TYPE_OTHER = 0,
			VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU = 1,
			VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU = 2,
			VK_PHYSICAL_DEVICE_TYPE_VIRTUAL_GPU = 3,
			VK_PHYSICAL_DEVICE_TYPE_CPU = 4,
			VK_PHYSICAL_DEVICE_TYPE_MAX_ENUM = 0x7FFFFFFF
		}

		private enum VkSampleCountFlags
		{
			VK_SAMPLE_COUNT_1_BIT = 0x00000001,
			VK_SAMPLE_COUNT_2_BIT = 0x00000002,
			VK_SAMPLE_COUNT_4_BIT = 0x00000004,
			VK_SAMPLE_COUNT_8_BIT = 0x00000008,
			VK_SAMPLE_COUNT_16_BIT = 0x00000010,
			VK_SAMPLE_COUNT_32_BIT = 0x00000020,
			VK_SAMPLE_COUNT_64_BIT = 0x00000040,
			VK_SAMPLE_COUNT_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
		}

		private enum VkQueueFlags
		{
			VK_QUEUE_GRAPHICS_BIT = 0x00000001,
			VK_QUEUE_COMPUTE_BIT = 0x00000002,
			VK_QUEUE_TRANSFER_BIT = 0x00000004,
			VK_QUEUE_SPARSE_BINDING_BIT = 0x00000008,
			VK_QUEUE_PROTECTED_BIT = 0x00000010,
			VK_QUEUE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
		}

		private enum VkDeviceQueueCreateFlags
		{
			VK_DEVICE_QUEUE_CREATE_PROTECTED_BIT = 0x00000001,
			VK_DEVICE_QUEUE_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
		}

		private enum VkSurfaceTransformFlagsKHR
		{
			VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR = 0x00000001,
			VK_SURFACE_TRANSFORM_ROTATE_90_BIT_KHR = 0x00000002,
			VK_SURFACE_TRANSFORM_ROTATE_180_BIT_KHR = 0x00000004,
			VK_SURFACE_TRANSFORM_ROTATE_270_BIT_KHR = 0x00000008,
			VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_BIT_KHR = 0x00000010,
			VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_90_BIT_KHR = 0x00000020,
			VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_180_BIT_KHR = 0x00000040,
			VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_270_BIT_KHR = 0x00000080,
			VK_SURFACE_TRANSFORM_INHERIT_BIT_KHR = 0x00000100,
			VK_SURFACE_TRANSFORM_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF
		}

		private enum VkCompositeAlphaFlagsKHR
		{
			VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR = 0x00000001,
			VK_COMPOSITE_ALPHA_PRE_MULTIPLIED_BIT_KHR = 0x00000002,
			VK_COMPOSITE_ALPHA_POST_MULTIPLIED_BIT_KHR = 0x00000004,
			VK_COMPOSITE_ALPHA_INHERIT_BIT_KHR = 0x00000008,
			VK_COMPOSITE_ALPHA_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF
		}

		private enum VkImageUsageFlags
		{
			VK_IMAGE_USAGE_TRANSFER_SRC_BIT = 0x00000001,
			VK_IMAGE_USAGE_TRANSFER_DST_BIT = 0x00000002,
			VK_IMAGE_USAGE_SAMPLED_BIT = 0x00000004,
			VK_IMAGE_USAGE_STORAGE_BIT = 0x00000008,
			VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT = 0x00000010,
			VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT = 0x00000020,
			VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT = 0x00000040,
			VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT = 0x00000080,
			VK_IMAGE_USAGE_SHADING_RATE_IMAGE_BIT_NV = 0x00000100,
			VK_IMAGE_USAGE_FRAGMENT_DENSITY_MAP_BIT_EXT = 0x00000200,
			VK_IMAGE_USAGE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
		}

		private enum VkFormat
		{
			VK_FORMAT_UNDEFINED = 0,
			VK_FORMAT_R4G4_UNORM_PACK8 = 1,
			VK_FORMAT_R4G4B4A4_UNORM_PACK16 = 2,
			VK_FORMAT_B4G4R4A4_UNORM_PACK16 = 3,
			VK_FORMAT_R5G6B5_UNORM_PACK16 = 4,
			VK_FORMAT_B5G6R5_UNORM_PACK16 = 5,
			VK_FORMAT_R5G5B5A1_UNORM_PACK16 = 6,
			VK_FORMAT_B5G5R5A1_UNORM_PACK16 = 7,
			VK_FORMAT_A1R5G5B5_UNORM_PACK16 = 8,
			VK_FORMAT_R8_UNORM = 9,
			VK_FORMAT_R8_SNORM = 10,
			VK_FORMAT_R8_USCALED = 11,
			VK_FORMAT_R8_SSCALED = 12,
			VK_FORMAT_R8_UINT = 13,
			VK_FORMAT_R8_SINT = 14,
			VK_FORMAT_R8_SRGB = 15,
			VK_FORMAT_R8G8_UNORM = 16,
			VK_FORMAT_R8G8_SNORM = 17,
			VK_FORMAT_R8G8_USCALED = 18,
			VK_FORMAT_R8G8_SSCALED = 19,
			VK_FORMAT_R8G8_UINT = 20,
			VK_FORMAT_R8G8_SINT = 21,
			VK_FORMAT_R8G8_SRGB = 22,
			VK_FORMAT_R8G8B8_UNORM = 23,
			VK_FORMAT_R8G8B8_SNORM = 24,
			VK_FORMAT_R8G8B8_USCALED = 25,
			VK_FORMAT_R8G8B8_SSCALED = 26,
			VK_FORMAT_R8G8B8_UINT = 27,
			VK_FORMAT_R8G8B8_SINT = 28,
			VK_FORMAT_R8G8B8_SRGB = 29,
			VK_FORMAT_B8G8R8_UNORM = 30,
			VK_FORMAT_B8G8R8_SNORM = 31,
			VK_FORMAT_B8G8R8_USCALED = 32,
			VK_FORMAT_B8G8R8_SSCALED = 33,
			VK_FORMAT_B8G8R8_UINT = 34,
			VK_FORMAT_B8G8R8_SINT = 35,
			VK_FORMAT_B8G8R8_SRGB = 36,
			VK_FORMAT_R8G8B8A8_UNORM = 37,
			VK_FORMAT_R8G8B8A8_SNORM = 38,
			VK_FORMAT_R8G8B8A8_USCALED = 39,
			VK_FORMAT_R8G8B8A8_SSCALED = 40,
			VK_FORMAT_R8G8B8A8_UINT = 41,
			VK_FORMAT_R8G8B8A8_SINT = 42,
			VK_FORMAT_R8G8B8A8_SRGB = 43,
			VK_FORMAT_B8G8R8A8_UNORM = 44,
			VK_FORMAT_B8G8R8A8_SNORM = 45,
			VK_FORMAT_B8G8R8A8_USCALED = 46,
			VK_FORMAT_B8G8R8A8_SSCALED = 47,
			VK_FORMAT_B8G8R8A8_UINT = 48,
			VK_FORMAT_B8G8R8A8_SINT = 49,
			VK_FORMAT_B8G8R8A8_SRGB = 50,
			VK_FORMAT_A8B8G8R8_UNORM_PACK32 = 51,
			VK_FORMAT_A8B8G8R8_SNORM_PACK32 = 52,
			VK_FORMAT_A8B8G8R8_USCALED_PACK32 = 53,
			VK_FORMAT_A8B8G8R8_SSCALED_PACK32 = 54,
			VK_FORMAT_A8B8G8R8_UINT_PACK32 = 55,
			VK_FORMAT_A8B8G8R8_SINT_PACK32 = 56,
			VK_FORMAT_A8B8G8R8_SRGB_PACK32 = 57,
			VK_FORMAT_A2R10G10B10_UNORM_PACK32 = 58,
			VK_FORMAT_A2R10G10B10_SNORM_PACK32 = 59,
			VK_FORMAT_A2R10G10B10_USCALED_PACK32 = 60,
			VK_FORMAT_A2R10G10B10_SSCALED_PACK32 = 61,
			VK_FORMAT_A2R10G10B10_UINT_PACK32 = 62,
			VK_FORMAT_A2R10G10B10_SINT_PACK32 = 63,
			VK_FORMAT_A2B10G10R10_UNORM_PACK32 = 64,
			VK_FORMAT_A2B10G10R10_SNORM_PACK32 = 65,
			VK_FORMAT_A2B10G10R10_USCALED_PACK32 = 66,
			VK_FORMAT_A2B10G10R10_SSCALED_PACK32 = 67,
			VK_FORMAT_A2B10G10R10_UINT_PACK32 = 68,
			VK_FORMAT_A2B10G10R10_SINT_PACK32 = 69,
			VK_FORMAT_R16_UNORM = 70,
			VK_FORMAT_R16_SNORM = 71,
			VK_FORMAT_R16_USCALED = 72,
			VK_FORMAT_R16_SSCALED = 73,
			VK_FORMAT_R16_UINT = 74,
			VK_FORMAT_R16_SINT = 75,
			VK_FORMAT_R16_SFLOAT = 76,
			VK_FORMAT_R16G16_UNORM = 77,
			VK_FORMAT_R16G16_SNORM = 78,
			VK_FORMAT_R16G16_USCALED = 79,
			VK_FORMAT_R16G16_SSCALED = 80,
			VK_FORMAT_R16G16_UINT = 81,
			VK_FORMAT_R16G16_SINT = 82,
			VK_FORMAT_R16G16_SFLOAT = 83,
			VK_FORMAT_R16G16B16_UNORM = 84,
			VK_FORMAT_R16G16B16_SNORM = 85,
			VK_FORMAT_R16G16B16_USCALED = 86,
			VK_FORMAT_R16G16B16_SSCALED = 87,
			VK_FORMAT_R16G16B16_UINT = 88,
			VK_FORMAT_R16G16B16_SINT = 89,
			VK_FORMAT_R16G16B16_SFLOAT = 90,
			VK_FORMAT_R16G16B16A16_UNORM = 91,
			VK_FORMAT_R16G16B16A16_SNORM = 92,
			VK_FORMAT_R16G16B16A16_USCALED = 93,
			VK_FORMAT_R16G16B16A16_SSCALED = 94,
			VK_FORMAT_R16G16B16A16_UINT = 95,
			VK_FORMAT_R16G16B16A16_SINT = 96,
			VK_FORMAT_R16G16B16A16_SFLOAT = 97,
			VK_FORMAT_R32_UINT = 98,
			VK_FORMAT_R32_SINT = 99,
			VK_FORMAT_R32_SFLOAT = 100,
			VK_FORMAT_R32G32_UINT = 101,
			VK_FORMAT_R32G32_SINT = 102,
			VK_FORMAT_R32G32_SFLOAT = 103,
			VK_FORMAT_R32G32B32_UINT = 104,
			VK_FORMAT_R32G32B32_SINT = 105,
			VK_FORMAT_R32G32B32_SFLOAT = 106,
			VK_FORMAT_R32G32B32A32_UINT = 107,
			VK_FORMAT_R32G32B32A32_SINT = 108,
			VK_FORMAT_R32G32B32A32_SFLOAT = 109,
			VK_FORMAT_R64_UINT = 110,
			VK_FORMAT_R64_SINT = 111,
			VK_FORMAT_R64_SFLOAT = 112,
			VK_FORMAT_R64G64_UINT = 113,
			VK_FORMAT_R64G64_SINT = 114,
			VK_FORMAT_R64G64_SFLOAT = 115,
			VK_FORMAT_R64G64B64_UINT = 116,
			VK_FORMAT_R64G64B64_SINT = 117,
			VK_FORMAT_R64G64B64_SFLOAT = 118,
			VK_FORMAT_R64G64B64A64_UINT = 119,
			VK_FORMAT_R64G64B64A64_SINT = 120,
			VK_FORMAT_R64G64B64A64_SFLOAT = 121,
			VK_FORMAT_B10G11R11_UFLOAT_PACK32 = 122,
			VK_FORMAT_E5B9G9R9_UFLOAT_PACK32 = 123,
			VK_FORMAT_D16_UNORM = 124,
			VK_FORMAT_X8_D24_UNORM_PACK32 = 125,
			VK_FORMAT_D32_SFLOAT = 126,
			VK_FORMAT_S8_UINT = 127,
			VK_FORMAT_D16_UNORM_S8_UINT = 128,
			VK_FORMAT_D24_UNORM_S8_UINT = 129,
			VK_FORMAT_D32_SFLOAT_S8_UINT = 130,
			VK_FORMAT_BC1_RGB_UNORM_BLOCK = 131,
			VK_FORMAT_BC1_RGB_SRGB_BLOCK = 132,
			VK_FORMAT_BC1_RGBA_UNORM_BLOCK = 133,
			VK_FORMAT_BC1_RGBA_SRGB_BLOCK = 134,
			VK_FORMAT_BC2_UNORM_BLOCK = 135,
			VK_FORMAT_BC2_SRGB_BLOCK = 136,
			VK_FORMAT_BC3_UNORM_BLOCK = 137,
			VK_FORMAT_BC3_SRGB_BLOCK = 138,
			VK_FORMAT_BC4_UNORM_BLOCK = 139,
			VK_FORMAT_BC4_SNORM_BLOCK = 140,
			VK_FORMAT_BC5_UNORM_BLOCK = 141,
			VK_FORMAT_BC5_SNORM_BLOCK = 142,
			VK_FORMAT_BC6H_UFLOAT_BLOCK = 143,
			VK_FORMAT_BC6H_SFLOAT_BLOCK = 144,
			VK_FORMAT_BC7_UNORM_BLOCK = 145,
			VK_FORMAT_BC7_SRGB_BLOCK = 146,
			VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK = 147,
			VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK = 148,
			VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK = 149,
			VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK = 150,
			VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK = 151,
			VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK = 152,
			VK_FORMAT_EAC_R11_UNORM_BLOCK = 153,
			VK_FORMAT_EAC_R11_SNORM_BLOCK = 154,
			VK_FORMAT_EAC_R11G11_UNORM_BLOCK = 155,
			VK_FORMAT_EAC_R11G11_SNORM_BLOCK = 156,
			VK_FORMAT_ASTC_4x4_UNORM_BLOCK = 157,
			VK_FORMAT_ASTC_4x4_SRGB_BLOCK = 158,
			VK_FORMAT_ASTC_5x4_UNORM_BLOCK = 159,
			VK_FORMAT_ASTC_5x4_SRGB_BLOCK = 160,
			VK_FORMAT_ASTC_5x5_UNORM_BLOCK = 161,
			VK_FORMAT_ASTC_5x5_SRGB_BLOCK = 162,
			VK_FORMAT_ASTC_6x5_UNORM_BLOCK = 163,
			VK_FORMAT_ASTC_6x5_SRGB_BLOCK = 164,
			VK_FORMAT_ASTC_6x6_UNORM_BLOCK = 165,
			VK_FORMAT_ASTC_6x6_SRGB_BLOCK = 166,
			VK_FORMAT_ASTC_8x5_UNORM_BLOCK = 167,
			VK_FORMAT_ASTC_8x5_SRGB_BLOCK = 168,
			VK_FORMAT_ASTC_8x6_UNORM_BLOCK = 169,
			VK_FORMAT_ASTC_8x6_SRGB_BLOCK = 170,
			VK_FORMAT_ASTC_8x8_UNORM_BLOCK = 171,
			VK_FORMAT_ASTC_8x8_SRGB_BLOCK = 172,
			VK_FORMAT_ASTC_10x5_UNORM_BLOCK = 173,
			VK_FORMAT_ASTC_10x5_SRGB_BLOCK = 174,
			VK_FORMAT_ASTC_10x6_UNORM_BLOCK = 175,
			VK_FORMAT_ASTC_10x6_SRGB_BLOCK = 176,
			VK_FORMAT_ASTC_10x8_UNORM_BLOCK = 177,
			VK_FORMAT_ASTC_10x8_SRGB_BLOCK = 178,
			VK_FORMAT_ASTC_10x10_UNORM_BLOCK = 179,
			VK_FORMAT_ASTC_10x10_SRGB_BLOCK = 180,
			VK_FORMAT_ASTC_12x10_UNORM_BLOCK = 181,
			VK_FORMAT_ASTC_12x10_SRGB_BLOCK = 182,
			VK_FORMAT_ASTC_12x12_UNORM_BLOCK = 183,
			VK_FORMAT_ASTC_12x12_SRGB_BLOCK = 184,
		}

		private enum VkColorSpaceKHR
		{
			VK_COLOR_SPACE_SRGB_NONLINEAR_KHR = 0,
			VK_COLOR_SPACE_DISPLAY_P3_NONLINEAR_EXT = 1000104001,
			VK_COLOR_SPACE_EXTENDED_SRGB_LINEAR_EXT = 1000104002,
			VK_COLOR_SPACE_DISPLAY_P3_LINEAR_EXT = 1000104003,
			VK_COLOR_SPACE_DCI_P3_NONLINEAR_EXT = 1000104004,
			VK_COLOR_SPACE_BT709_LINEAR_EXT = 1000104005,
			VK_COLOR_SPACE_BT709_NONLINEAR_EXT = 1000104006,
			VK_COLOR_SPACE_BT2020_LINEAR_EXT = 1000104007,
			VK_COLOR_SPACE_HDR10_ST2084_EXT = 1000104008,
			VK_COLOR_SPACE_DOLBYVISION_EXT = 1000104009,
			VK_COLOR_SPACE_HDR10_HLG_EXT = 1000104010,
			VK_COLOR_SPACE_ADOBERGB_LINEAR_EXT = 1000104011,
			VK_COLOR_SPACE_ADOBERGB_NONLINEAR_EXT = 1000104012,
			VK_COLOR_SPACE_PASS_THROUGH_EXT = 1000104013,
			VK_COLOR_SPACE_EXTENDED_SRGB_NONLINEAR_EXT = 1000104014,
			VK_COLOR_SPACE_DISPLAY_NATIVE_AMD = 1000213000,
			VK_COLORSPACE_SRGB_NONLINEAR_KHR = VK_COLOR_SPACE_SRGB_NONLINEAR_KHR,
			VK_COLOR_SPACE_DCI_P3_LINEAR_EXT = VK_COLOR_SPACE_DISPLAY_P3_LINEAR_EXT,
			VK_COLOR_SPACE_MAX_ENUM_KHR = 0x7FFFFFFF
		}

		private enum VkPresentModeKHR
		{
			VK_PRESENT_MODE_IMMEDIATE_KHR = 0,
			VK_PRESENT_MODE_MAILBOX_KHR = 1,
			VK_PRESENT_MODE_FIFO_KHR = 2,
			VK_PRESENT_MODE_FIFO_RELAXED_KHR = 3,
		}

		private enum VkFormatFeatureFlags
		{
			VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT = 0x00000001,
			VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT = 0x00000002,
			VK_FORMAT_FEATURE_STORAGE_IMAGE_ATOMIC_BIT = 0x00000004,
			VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT = 0x00000008,
			VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT = 0x00000010,
			VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_ATOMIC_BIT = 0x00000020,
			VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT = 0x00000040,
			VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT = 0x00000080,
			VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT = 0x00000100,
			VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT = 0x00000200,
			VK_FORMAT_FEATURE_BLIT_SRC_BIT = 0x00000400,
			VK_FORMAT_FEATURE_BLIT_DST_BIT = 0x00000800,
			VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT = 0x00001000,
			VK_FORMAT_FEATURE_TRANSFER_SRC_BIT = 0x00004000,
			VK_FORMAT_FEATURE_TRANSFER_DST_BIT = 0x00008000,
			VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT = 0x00020000,
			VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT = 0x00040000,
			VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT = 0x00080000,
			VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT = 0x00100000,
			VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT = 0x00200000,
			VK_FORMAT_FEATURE_DISJOINT_BIT = 0x00400000,
			VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT = 0x00800000,
			VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG = 0x00002000,
			VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT_EXT = 0x00010000,
			VK_FORMAT_FEATURE_FRAGMENT_DENSITY_MAP_BIT_EXT = 0x01000000,
			VK_FORMAT_FEATURE_TRANSFER_SRC_BIT_KHR = VK_FORMAT_FEATURE_TRANSFER_SRC_BIT,
			VK_FORMAT_FEATURE_TRANSFER_DST_BIT_KHR = VK_FORMAT_FEATURE_TRANSFER_DST_BIT,
			VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT_KHR = VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT,
			VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT_KHR = VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT,
			VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT_KHR = VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT,
			VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT_KHR = VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT,
			VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT_KHR = VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT,
			VK_FORMAT_FEATURE_DISJOINT_BIT_KHR = VK_FORMAT_FEATURE_DISJOINT_BIT,
			VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT_KHR = VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT,
			VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_EXT = VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG,
			VK_FORMAT_FEATURE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
		}

		private enum VkFramebufferCreateFlags
		{
			VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT_KHR = 0x00000001,
			VK_FRAMEBUFFER_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
		}

		private enum VkImageViewCreateFlags
		{
			VK_IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DYNAMIC_BIT_EXT = 0x00000001,
			VK_IMAGE_VIEW_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
		}

		private enum VkImageViewType
		{
			VK_IMAGE_VIEW_TYPE_1D = 0,
			VK_IMAGE_VIEW_TYPE_2D = 1,
			VK_IMAGE_VIEW_TYPE_3D = 2,
			VK_IMAGE_VIEW_TYPE_CUBE = 3,
			VK_IMAGE_VIEW_TYPE_1D_ARRAY = 4,
			VK_IMAGE_VIEW_TYPE_2D_ARRAY = 5,
			VK_IMAGE_VIEW_TYPE_CUBE_ARRAY = 6,
			VK_IMAGE_VIEW_TYPE_MAX_ENUM = 0x7FFFFFFF
		}

		private enum VkComponentSwizzle
		{
			VK_COMPONENT_SWIZZLE_IDENTITY = 0,
			VK_COMPONENT_SWIZZLE_ZERO = 1,
			VK_COMPONENT_SWIZZLE_ONE = 2,
			VK_COMPONENT_SWIZZLE_R = 3,
			VK_COMPONENT_SWIZZLE_G = 4,
			VK_COMPONENT_SWIZZLE_B = 5,
			VK_COMPONENT_SWIZZLE_A = 6,
			VK_COMPONENT_SWIZZLE_MAX_ENUM = 0x7FFFFFFF
		}

		private enum VkImageAspectFlags
		{
			VK_IMAGE_ASPECT_COLOR_BIT = 0x00000001,
			VK_IMAGE_ASPECT_DEPTH_BIT = 0x00000002,
			VK_IMAGE_ASPECT_STENCIL_BIT = 0x00000004,
			VK_IMAGE_ASPECT_METADATA_BIT = 0x00000008,
			VK_IMAGE_ASPECT_PLANE_0_BIT = 0x00000010,
			VK_IMAGE_ASPECT_PLANE_1_BIT = 0x00000020,
			VK_IMAGE_ASPECT_PLANE_2_BIT = 0x00000040,
			VK_IMAGE_ASPECT_MEMORY_PLANE_0_BIT_EXT = 0x00000080,
			VK_IMAGE_ASPECT_MEMORY_PLANE_1_BIT_EXT = 0x00000100,
			VK_IMAGE_ASPECT_MEMORY_PLANE_2_BIT_EXT = 0x00000200,
			VK_IMAGE_ASPECT_MEMORY_PLANE_3_BIT_EXT = 0x00000400,
			VK_IMAGE_ASPECT_PLANE_0_BIT_KHR = VK_IMAGE_ASPECT_PLANE_0_BIT,
			VK_IMAGE_ASPECT_PLANE_1_BIT_KHR = VK_IMAGE_ASPECT_PLANE_1_BIT,
			VK_IMAGE_ASPECT_PLANE_2_BIT_KHR = VK_IMAGE_ASPECT_PLANE_2_BIT,
			VK_IMAGE_ASPECT_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
		}

		private enum VkImageCreateFlags
		{
			VK_IMAGE_CREATE_SPARSE_BINDING_BIT = 0x00000001,
			VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT = 0x00000002,
			VK_IMAGE_CREATE_SPARSE_ALIASED_BIT = 0x00000004,
			VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT = 0x00000008,
			VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT = 0x00000010,
			VK_IMAGE_CREATE_ALIAS_BIT = 0x00000400,
			VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT = 0x00000040,
			VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT = 0x00000020,
			VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT = 0x00000080,
			VK_IMAGE_CREATE_EXTENDED_USAGE_BIT = 0x00000100,
			VK_IMAGE_CREATE_PROTECTED_BIT = 0x00000800,
			VK_IMAGE_CREATE_DISJOINT_BIT = 0x00000200,
			VK_IMAGE_CREATE_CORNER_SAMPLED_BIT_NV = 0x00002000,
			VK_IMAGE_CREATE_SAMPLE_LOCATIONS_COMPATIBLE_DEPTH_BIT_EXT = 0x00001000,
			VK_IMAGE_CREATE_SUBSAMPLED_BIT_EXT = 0x00004000,
			VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR = VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT,
			VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT_KHR = VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT,
			VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT_KHR = VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT,
			VK_IMAGE_CREATE_EXTENDED_USAGE_BIT_KHR = VK_IMAGE_CREATE_EXTENDED_USAGE_BIT,
			VK_IMAGE_CREATE_DISJOINT_BIT_KHR = VK_IMAGE_CREATE_DISJOINT_BIT,
			VK_IMAGE_CREATE_ALIAS_BIT_KHR = VK_IMAGE_CREATE_ALIAS_BIT,
			VK_IMAGE_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
		}

		private enum VkImageType
		{
			VK_IMAGE_TYPE_1D = 0,
			VK_IMAGE_TYPE_2D = 1,
			VK_IMAGE_TYPE_3D = 2,
			VK_IMAGE_TYPE_MAX_ENUM = 0x7FFFFFFF
		}

		private enum VkImageTiling
		{
			VK_IMAGE_TILING_OPTIMAL = 0,
			VK_IMAGE_TILING_LINEAR = 1,
			VK_IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT = 1000158000,
			VK_IMAGE_TILING_MAX_ENUM = 0x7FFFFFFF
		}

		private enum VkSharingMode
		{
			VK_SHARING_MODE_EXCLUSIVE = 0,
			VK_SHARING_MODE_CONCURRENT = 1,
			VK_SHARING_MODE_MAX_ENUM = 0x7FFFFFFF
		}

		private enum VkImageLayout
		{
			VK_IMAGE_LAYOUT_UNDEFINED = 0,
			VK_IMAGE_LAYOUT_GENERAL = 1,
			VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL = 2,
			VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL = 3,
			VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL = 4,
			VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL = 5,
			VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL = 6,
			VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL = 7,
			VK_IMAGE_LAYOUT_PREINITIALIZED = 8,
			VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL = 1000117000,
			VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL = 1000117001,
			VK_IMAGE_LAYOUT_PRESENT_SRC_KHR = 1000001002,
			VK_IMAGE_LAYOUT_SHARED_PRESENT_KHR = 1000111000,
			VK_IMAGE_LAYOUT_SHADING_RATE_OPTIMAL_NV = 1000164003,
			VK_IMAGE_LAYOUT_FRAGMENT_DENSITY_MAP_OPTIMAL_EXT = 1000218000,
			VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL_KHR = VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL,
			VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL_KHR = VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL,
			VK_IMAGE_LAYOUT_MAX_ENUM = 0x7FFFFFFF
		}

		private enum VkSwapchainCreateFlagsKHR
		{
			VK_SWAPCHAIN_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR = 0x00000001,
			VK_SWAPCHAIN_CREATE_PROTECTED_BIT_KHR = 0x00000002,
			VK_SWAPCHAIN_CREATE_MUTABLE_FORMAT_BIT_KHR = 0x00000004,
			VK_SWAPCHAIN_CREATE_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF
		}

		private enum VkPipelineCreateFlags
		{
			VK_PIPELINE_CREATE_DISABLE_OPTIMIZATION_BIT = 0x00000001,
			VK_PIPELINE_CREATE_ALLOW_DERIVATIVES_BIT = 0x00000002,
			VK_PIPELINE_CREATE_DERIVATIVE_BIT = 0x00000004,
			VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT = 0x00000008,
			VK_PIPELINE_CREATE_DISPATCH_BASE = 0x00000010,
			VK_PIPELINE_CREATE_DEFER_COMPILE_BIT_NV = 0x00000020,
			VK_PIPELINE_CREATE_CAPTURE_STATISTICS_BIT_KHR = 0x00000040,
			VK_PIPELINE_CREATE_CAPTURE_INTERNAL_REPRESENTATIONS_BIT_KHR = 0x00000080,
			VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT_KHR = VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT,
			VK_PIPELINE_CREATE_DISPATCH_BASE_KHR = VK_PIPELINE_CREATE_DISPATCH_BASE,
			VK_PIPELINE_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
		}

		private enum VkPipelineShaderStageCreateFlags
		{
			VK_PIPELINE_SHADER_STAGE_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT_EXT = 0x00000001,
			VK_PIPELINE_SHADER_STAGE_CREATE_REQUIRE_FULL_SUBGROUPS_BIT_EXT = 0x00000002,
			VK_PIPELINE_SHADER_STAGE_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
		}

		private enum VkShaderStageFlags
		{
			VK_SHADER_STAGE_VERTEX_BIT = 0x00000001,
			VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT = 0x00000002,
			VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT = 0x00000004,
			VK_SHADER_STAGE_GEOMETRY_BIT = 0x00000008,
			VK_SHADER_STAGE_FRAGMENT_BIT = 0x00000010,
			VK_SHADER_STAGE_COMPUTE_BIT = 0x00000020,
			VK_SHADER_STAGE_ALL_GRAPHICS = 0x0000001F,
			VK_SHADER_STAGE_ALL = 0x7FFFFFFF,
			VK_SHADER_STAGE_RAYGEN_BIT_NV = 0x00000100,
			VK_SHADER_STAGE_ANY_HIT_BIT_NV = 0x00000200,
			VK_SHADER_STAGE_CLOSEST_HIT_BIT_NV = 0x00000400,
			VK_SHADER_STAGE_MISS_BIT_NV = 0x00000800,
			VK_SHADER_STAGE_INTERSECTION_BIT_NV = 0x00001000,
			VK_SHADER_STAGE_CALLABLE_BIT_NV = 0x00002000,
			VK_SHADER_STAGE_TASK_BIT_NV = 0x00000040,
			VK_SHADER_STAGE_MESH_BIT_NV = 0x00000080,
			VK_SHADER_STAGE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
		}

		private enum VkPrimitiveTopology
		{
			VK_PRIMITIVE_TOPOLOGY_POINT_LIST = 0,
			VK_PRIMITIVE_TOPOLOGY_LINE_LIST = 1,
			VK_PRIMITIVE_TOPOLOGY_LINE_STRIP = 2,
			VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST = 3,
			VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP = 4,
			VK_PRIMITIVE_TOPOLOGY_TRIANGLE_FAN = 5,
			VK_PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY = 6,
			VK_PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY = 7,
			VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY = 8,
			VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY = 9,
			VK_PRIMITIVE_TOPOLOGY_PATCH_LIST = 10,
			VK_PRIMITIVE_TOPOLOGY_MAX_ENUM = 0x7FFFFFFF
		}

		private enum VkPolygonMode
		{
			VK_POLYGON_MODE_FILL = 0,
			VK_POLYGON_MODE_LINE = 1,
			VK_POLYGON_MODE_POINT = 2,
			VK_POLYGON_MODE_FILL_RECTANGLE_NV = 1000153000,
			VK_POLYGON_MODE_MAX_ENUM = 0x7FFFFFFF
		}

		private enum VkCullModeFlags
		{
			VK_CULL_MODE_NONE = 0,
			VK_CULL_MODE_FRONT_BIT = 0x00000001,
			VK_CULL_MODE_BACK_BIT = 0x00000002,
			VK_CULL_MODE_FRONT_AND_BACK = 0x00000003,
			VK_CULL_MODE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
		}

		private enum VkFrontFace
		{
			VK_FRONT_FACE_COUNTER_CLOCKWISE = 0,
			VK_FRONT_FACE_CLOCKWISE = 1,
			VK_FRONT_FACE_MAX_ENUM = 0x7FFFFFFF
		}

		private enum VkVertexInputRate
		{
			VK_VERTEX_INPUT_RATE_VERTEX = 0,
			VK_VERTEX_INPUT_RATE_INSTANCE = 1,
			VK_VERTEX_INPUT_RATE_MAX_ENUM = 0x7FFFFFFF
		}

		private enum VkCompareOp
		{
			VK_COMPARE_OP_NEVER = 0,
			VK_COMPARE_OP_LESS = 1,
			VK_COMPARE_OP_EQUAL = 2,
			VK_COMPARE_OP_LESS_OR_EQUAL = 3,
			VK_COMPARE_OP_GREATER = 4,
			VK_COMPARE_OP_NOT_EQUAL = 5,
			VK_COMPARE_OP_GREATER_OR_EQUAL = 6,
			VK_COMPARE_OP_ALWAYS = 7,
			VK_COMPARE_OP_MAX_ENUM = 0x7FFFFFFF
		}

		private enum VkStencilOp
		{
			VK_STENCIL_OP_KEEP = 0,
			VK_STENCIL_OP_ZERO = 1,
			VK_STENCIL_OP_REPLACE = 2,
			VK_STENCIL_OP_INCREMENT_AND_CLAMP = 3,
			VK_STENCIL_OP_DECREMENT_AND_CLAMP = 4,
			VK_STENCIL_OP_INVERT = 5,
			VK_STENCIL_OP_INCREMENT_AND_WRAP = 6,
			VK_STENCIL_OP_DECREMENT_AND_WRAP = 7,
			VK_STENCIL_OP_MAX_ENUM = 0x7FFFFFFF
		}

		private enum VkLogicOp
		{
			VK_LOGIC_OP_CLEAR = 0,
			VK_LOGIC_OP_AND = 1,
			VK_LOGIC_OP_AND_REVERSE = 2,
			VK_LOGIC_OP_COPY = 3,
			VK_LOGIC_OP_AND_INVERTED = 4,
			VK_LOGIC_OP_NO_OP = 5,
			VK_LOGIC_OP_XOR = 6,
			VK_LOGIC_OP_OR = 7,
			VK_LOGIC_OP_NOR = 8,
			VK_LOGIC_OP_EQUIVALENT = 9,
			VK_LOGIC_OP_INVERT = 10,
			VK_LOGIC_OP_OR_REVERSE = 11,
			VK_LOGIC_OP_COPY_INVERTED = 12,
			VK_LOGIC_OP_OR_INVERTED = 13,
			VK_LOGIC_OP_NAND = 14,
			VK_LOGIC_OP_SET = 15,
			VK_LOGIC_OP_MAX_ENUM = 0x7FFFFFFF
		}

		private enum VkBlendFactor
		{
			VK_BLEND_FACTOR_ZERO = 0,
			VK_BLEND_FACTOR_ONE = 1,
			VK_BLEND_FACTOR_SRC_COLOR = 2,
			VK_BLEND_FACTOR_ONE_MINUS_SRC_COLOR = 3,
			VK_BLEND_FACTOR_DST_COLOR = 4,
			VK_BLEND_FACTOR_ONE_MINUS_DST_COLOR = 5,
			VK_BLEND_FACTOR_SRC_ALPHA = 6,
			VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA = 7,
			VK_BLEND_FACTOR_DST_ALPHA = 8,
			VK_BLEND_FACTOR_ONE_MINUS_DST_ALPHA = 9,
			VK_BLEND_FACTOR_CONSTANT_COLOR = 10,
			VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR = 11,
			VK_BLEND_FACTOR_CONSTANT_ALPHA = 12,
			VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA = 13,
			VK_BLEND_FACTOR_SRC_ALPHA_SATURATE = 14,
			VK_BLEND_FACTOR_SRC1_COLOR = 15,
			VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR = 16,
			VK_BLEND_FACTOR_SRC1_ALPHA = 17,
			VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA = 18,
			VK_BLEND_FACTOR_MAX_ENUM = 0x7FFFFFFF
		}

		private enum VkBlendOp
		{
			VK_BLEND_OP_ADD = 0,
			VK_BLEND_OP_SUBTRACT = 1,
			VK_BLEND_OP_REVERSE_SUBTRACT = 2,
			VK_BLEND_OP_MIN = 3,
			VK_BLEND_OP_MAX = 4,
			VK_BLEND_OP_ZERO_EXT = 1000148000,
			VK_BLEND_OP_SRC_EXT = 1000148001,
			VK_BLEND_OP_DST_EXT = 1000148002,
			VK_BLEND_OP_SRC_OVER_EXT = 1000148003,
			VK_BLEND_OP_DST_OVER_EXT = 1000148004,
			VK_BLEND_OP_SRC_IN_EXT = 1000148005,
			VK_BLEND_OP_DST_IN_EXT = 1000148006,
			VK_BLEND_OP_SRC_OUT_EXT = 1000148007,
			VK_BLEND_OP_DST_OUT_EXT = 1000148008,
			VK_BLEND_OP_SRC_ATOP_EXT = 1000148009,
			VK_BLEND_OP_DST_ATOP_EXT = 1000148010,
			VK_BLEND_OP_XOR_EXT = 1000148011,
			VK_BLEND_OP_MULTIPLY_EXT = 1000148012,
			VK_BLEND_OP_SCREEN_EXT = 1000148013,
			VK_BLEND_OP_OVERLAY_EXT = 1000148014,
			VK_BLEND_OP_DARKEN_EXT = 1000148015,
			VK_BLEND_OP_LIGHTEN_EXT = 1000148016,
			VK_BLEND_OP_COLORDODGE_EXT = 1000148017,
			VK_BLEND_OP_COLORBURN_EXT = 1000148018,
			VK_BLEND_OP_HARDLIGHT_EXT = 1000148019,
			VK_BLEND_OP_SOFTLIGHT_EXT = 1000148020,
			VK_BLEND_OP_DIFFERENCE_EXT = 1000148021,
			VK_BLEND_OP_EXCLUSION_EXT = 1000148022,
			VK_BLEND_OP_INVERT_EXT = 1000148023,
			VK_BLEND_OP_INVERT_RGB_EXT = 1000148024,
			VK_BLEND_OP_LINEARDODGE_EXT = 1000148025,
			VK_BLEND_OP_LINEARBURN_EXT = 1000148026,
			VK_BLEND_OP_VIVIDLIGHT_EXT = 1000148027,
			VK_BLEND_OP_LINEARLIGHT_EXT = 1000148028,
			VK_BLEND_OP_PINLIGHT_EXT = 1000148029,
			VK_BLEND_OP_HARDMIX_EXT = 1000148030,
			VK_BLEND_OP_HSL_HUE_EXT = 1000148031,
			VK_BLEND_OP_HSL_SATURATION_EXT = 1000148032,
			VK_BLEND_OP_HSL_COLOR_EXT = 1000148033,
			VK_BLEND_OP_HSL_LUMINOSITY_EXT = 1000148034,
			VK_BLEND_OP_PLUS_EXT = 1000148035,
			VK_BLEND_OP_PLUS_CLAMPED_EXT = 1000148036,
			VK_BLEND_OP_PLUS_CLAMPED_ALPHA_EXT = 1000148037,
			VK_BLEND_OP_PLUS_DARKER_EXT = 1000148038,
			VK_BLEND_OP_MINUS_EXT = 1000148039,
			VK_BLEND_OP_MINUS_CLAMPED_EXT = 1000148040,
			VK_BLEND_OP_CONTRAST_EXT = 1000148041,
			VK_BLEND_OP_INVERT_OVG_EXT = 1000148042,
			VK_BLEND_OP_RED_EXT = 1000148043,
			VK_BLEND_OP_GREEN_EXT = 1000148044,
			VK_BLEND_OP_BLUE_EXT = 1000148045,
			VK_BLEND_OP_MAX_ENUM = 0x7FFFFFFF
		}

		private enum VkColorComponentFlags
		{
			VK_COLOR_COMPONENT_R_BIT = 0x00000001,
			VK_COLOR_COMPONENT_G_BIT = 0x00000002,
			VK_COLOR_COMPONENT_B_BIT = 0x00000004,
			VK_COLOR_COMPONENT_A_BIT = 0x00000008,
			VK_COLOR_COMPONENT_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
		}

		private enum VkDynamicState
		{
			VK_DYNAMIC_STATE_VIEWPORT = 0,
			VK_DYNAMIC_STATE_SCISSOR = 1,
			VK_DYNAMIC_STATE_LINE_WIDTH = 2,
			VK_DYNAMIC_STATE_DEPTH_BIAS = 3,
			VK_DYNAMIC_STATE_BLEND_CONSTANTS = 4,
			VK_DYNAMIC_STATE_DEPTH_BOUNDS = 5,
			VK_DYNAMIC_STATE_STENCIL_COMPARE_MASK = 6,
			VK_DYNAMIC_STATE_STENCIL_WRITE_MASK = 7,
			VK_DYNAMIC_STATE_STENCIL_REFERENCE = 8,
			VK_DYNAMIC_STATE_VIEWPORT_W_SCALING_NV = 1000087000,
			VK_DYNAMIC_STATE_DISCARD_RECTANGLE_EXT = 1000099000,
			VK_DYNAMIC_STATE_SAMPLE_LOCATIONS_EXT = 1000143000,
			VK_DYNAMIC_STATE_VIEWPORT_SHADING_RATE_PALETTE_NV = 1000164004,
			VK_DYNAMIC_STATE_VIEWPORT_COARSE_SAMPLE_ORDER_NV = 1000164006,
			VK_DYNAMIC_STATE_EXCLUSIVE_SCISSOR_NV = 1000205001,
			VK_DYNAMIC_STATE_LINE_STIPPLE_EXT = 1000259000,
			VK_DYNAMIC_STATE_MAX_ENUM = 0x7FFFFFFF
		}

		private enum VkBufferCreateFlags
		{
			VK_BUFFER_CREATE_SPARSE_BINDING_BIT = 0x00000001,
			VK_BUFFER_CREATE_SPARSE_RESIDENCY_BIT = 0x00000002,
			VK_BUFFER_CREATE_SPARSE_ALIASED_BIT = 0x00000004,
			VK_BUFFER_CREATE_PROTECTED_BIT = 0x00000008,
			VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_EXT = 0x00000010,
			VK_BUFFER_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
		}

		private enum VkBufferUsageFlags
		{
			VK_BUFFER_USAGE_TRANSFER_SRC_BIT = 0x00000001,
			VK_BUFFER_USAGE_TRANSFER_DST_BIT = 0x00000002,
			VK_BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT = 0x00000004,
			VK_BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT = 0x00000008,
			VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT = 0x00000010,
			VK_BUFFER_USAGE_STORAGE_BUFFER_BIT = 0x00000020,
			VK_BUFFER_USAGE_INDEX_BUFFER_BIT = 0x00000040,
			VK_BUFFER_USAGE_VERTEX_BUFFER_BIT = 0x00000080,
			VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT = 0x00000100,
			VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_BUFFER_BIT_EXT = 0x00000800,
			VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_COUNTER_BUFFER_BIT_EXT = 0x00001000,
			VK_BUFFER_USAGE_CONDITIONAL_RENDERING_BIT_EXT = 0x00000200,
			VK_BUFFER_USAGE_RAY_TRACING_BIT_NV = 0x00000400,
			VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_EXT = 0x00020000,
			VK_BUFFER_USAGE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
		}

		private enum VkMemoryHeapFlags
		{
			VK_MEMORY_HEAP_DEVICE_LOCAL_BIT = 0x00000001,
			VK_MEMORY_HEAP_MULTI_INSTANCE_BIT = 0x00000002,
			VK_MEMORY_HEAP_MULTI_INSTANCE_BIT_KHR = VK_MEMORY_HEAP_MULTI_INSTANCE_BIT,
			VK_MEMORY_HEAP_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
		}

		private enum VkMemoryPropertyFlags
		{
			VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT = 0x00000001,
			VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT = 0x00000002,
			VK_MEMORY_PROPERTY_HOST_COHERENT_BIT = 0x00000004,
			VK_MEMORY_PROPERTY_HOST_CACHED_BIT = 0x00000008,
			VK_MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT = 0x00000010,
			VK_MEMORY_PROPERTY_PROTECTED_BIT = 0x00000020,
			VK_MEMORY_PROPERTY_DEVICE_COHERENT_BIT_AMD = 0x00000040,
			VK_MEMORY_PROPERTY_DEVICE_UNCACHED_BIT_AMD = 0x00000080,
			VK_MEMORY_PROPERTY_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
		}

		private enum VkAttachmentDescriptionFlags
		{
			VK_ATTACHMENT_DESCRIPTION_MAY_ALIAS_BIT = 0x00000001,
			VK_ATTACHMENT_DESCRIPTION_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
		}

		private enum VkAttachmentLoadOp
		{
			VK_ATTACHMENT_LOAD_OP_LOAD = 0,
			VK_ATTACHMENT_LOAD_OP_CLEAR = 1,
			VK_ATTACHMENT_LOAD_OP_DONT_CARE = 2,
			VK_ATTACHMENT_LOAD_OP_MAX_ENUM = 0x7FFFFFFF
		}

		private enum VkAttachmentStoreOp
		{
			VK_ATTACHMENT_STORE_OP_STORE = 0,
			VK_ATTACHMENT_STORE_OP_DONT_CARE = 1,
			VK_ATTACHMENT_STORE_OP_MAX_ENUM = 0x7FFFFFFF
		}

		private enum VkSubpassDescriptionFlags
		{
			VK_SUBPASS_DESCRIPTION_PER_VIEW_ATTRIBUTES_BIT_NVX = 0x00000001,
			VK_SUBPASS_DESCRIPTION_PER_VIEW_POSITION_X_ONLY_BIT_NVX = 0x00000002,
			VK_SUBPASS_DESCRIPTION_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
		}

		private enum VkPipelineBindPoint
		{
			VK_PIPELINE_BIND_POINT_GRAPHICS = 0,
			VK_PIPELINE_BIND_POINT_COMPUTE = 1,
			VK_PIPELINE_BIND_POINT_RAY_TRACING_NV = 1000165000,
			VK_PIPELINE_BIND_POINT_MAX_ENUM = 0x7FFFFFFF
		}

		private enum VkPipelineStageFlags
		{
			VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT = 0x00000001,
			VK_PIPELINE_STAGE_DRAW_INDIRECT_BIT = 0x00000002,
			VK_PIPELINE_STAGE_VERTEX_INPUT_BIT = 0x00000004,
			VK_PIPELINE_STAGE_VERTEX_SHADER_BIT = 0x00000008,
			VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT = 0x00000010,
			VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT = 0x00000020,
			VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT = 0x00000040,
			VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT = 0x00000080,
			VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT = 0x00000100,
			VK_PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT = 0x00000200,
			VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT = 0x00000400,
			VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT = 0x00000800,
			VK_PIPELINE_STAGE_TRANSFER_BIT = 0x00001000,
			VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT = 0x00002000,
			VK_PIPELINE_STAGE_HOST_BIT = 0x00004000,
			VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT = 0x00008000,
			VK_PIPELINE_STAGE_ALL_COMMANDS_BIT = 0x00010000,
			VK_PIPELINE_STAGE_TRANSFORM_FEEDBACK_BIT_EXT = 0x01000000,
			VK_PIPELINE_STAGE_CONDITIONAL_RENDERING_BIT_EXT = 0x00040000,
			VK_PIPELINE_STAGE_COMMAND_PROCESS_BIT_NVX = 0x00020000,
			VK_PIPELINE_STAGE_SHADING_RATE_IMAGE_BIT_NV = 0x00400000,
			VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_NV = 0x00200000,
			VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_NV = 0x02000000,
			VK_PIPELINE_STAGE_TASK_SHADER_BIT_NV = 0x00080000,
			VK_PIPELINE_STAGE_MESH_SHADER_BIT_NV = 0x00100000,
			VK_PIPELINE_STAGE_FRAGMENT_DENSITY_PROCESS_BIT_EXT = 0x00800000,
			VK_PIPELINE_STAGE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
		}

		private enum VkAccessFlags
		{
			VK_ACCESS_INDIRECT_COMMAND_READ_BIT = 0x00000001,
			VK_ACCESS_INDEX_READ_BIT = 0x00000002,
			VK_ACCESS_VERTEX_ATTRIBUTE_READ_BIT = 0x00000004,
			VK_ACCESS_UNIFORM_READ_BIT = 0x00000008,
			VK_ACCESS_INPUT_ATTACHMENT_READ_BIT = 0x00000010,
			VK_ACCESS_SHADER_READ_BIT = 0x00000020,
			VK_ACCESS_SHADER_WRITE_BIT = 0x00000040,
			VK_ACCESS_COLOR_ATTACHMENT_READ_BIT = 0x00000080,
			VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT = 0x00000100,
			VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT = 0x00000200,
			VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT = 0x00000400,
			VK_ACCESS_TRANSFER_READ_BIT = 0x00000800,
			VK_ACCESS_TRANSFER_WRITE_BIT = 0x00001000,
			VK_ACCESS_HOST_READ_BIT = 0x00002000,
			VK_ACCESS_HOST_WRITE_BIT = 0x00004000,
			VK_ACCESS_MEMORY_READ_BIT = 0x00008000,
			VK_ACCESS_MEMORY_WRITE_BIT = 0x00010000,
			VK_ACCESS_TRANSFORM_FEEDBACK_WRITE_BIT_EXT = 0x02000000,
			VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_READ_BIT_EXT = 0x04000000,
			VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_WRITE_BIT_EXT = 0x08000000,
			VK_ACCESS_CONDITIONAL_RENDERING_READ_BIT_EXT = 0x00100000,
			VK_ACCESS_COMMAND_PROCESS_READ_BIT_NVX = 0x00020000,
			VK_ACCESS_COMMAND_PROCESS_WRITE_BIT_NVX = 0x00040000,
			VK_ACCESS_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT = 0x00080000,
			VK_ACCESS_SHADING_RATE_IMAGE_READ_BIT_NV = 0x00800000,
			VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_NV = 0x00200000,
			VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_NV = 0x00400000,
			VK_ACCESS_FRAGMENT_DENSITY_MAP_READ_BIT_EXT = 0x01000000,
			VK_ACCESS_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
		}

		private enum VkDependencyFlags
		{
			VK_DEPENDENCY_BY_REGION_BIT = 0x00000001,
			VK_DEPENDENCY_DEVICE_GROUP_BIT = 0x00000004,
			VK_DEPENDENCY_VIEW_LOCAL_BIT = 0x00000002,
			VK_DEPENDENCY_VIEW_LOCAL_BIT_KHR = VK_DEPENDENCY_VIEW_LOCAL_BIT,
			VK_DEPENDENCY_DEVICE_GROUP_BIT_KHR = VK_DEPENDENCY_DEVICE_GROUP_BIT,
			VK_DEPENDENCY_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
		}

		private enum VkCommandPoolCreateFlags
		{
			VK_COMMAND_POOL_CREATE_TRANSIENT_BIT = 0x00000001,
			VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT = 0x00000002,
		}

		private enum VkCommandBufferLevel
		{
			VK_COMMAND_BUFFER_LEVEL_PRIMARY = 0,
			VK_COMMAND_BUFFER_LEVEL_SECONDARY = 1,
			VK_COMMAND_BUFFER_LEVEL_MAX_ENUM = 0x7FFFFFFF
		}

		private enum VkQueryControlFlags
		{
			VK_QUERY_CONTROL_PRECISE_BIT = 0x00000001,
			VK_QUERY_CONTROL_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
		}

		private enum VkQueryPipelineStatisticFlags
		{
			VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_VERTICES_BIT = 0x00000001,
			VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_PRIMITIVES_BIT = 0x00000002,
			VK_QUERY_PIPELINE_STATISTIC_VERTEX_SHADER_INVOCATIONS_BIT = 0x00000004,
			VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_INVOCATIONS_BIT = 0x00000008,
			VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_PRIMITIVES_BIT = 0x00000010,
			VK_QUERY_PIPELINE_STATISTIC_CLIPPING_INVOCATIONS_BIT = 0x00000020,
			VK_QUERY_PIPELINE_STATISTIC_CLIPPING_PRIMITIVES_BIT = 0x00000040,
			VK_QUERY_PIPELINE_STATISTIC_FRAGMENT_SHADER_INVOCATIONS_BIT = 0x00000080,
			VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_CONTROL_SHADER_PATCHES_BIT = 0x00000100,
			VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_EVALUATION_SHADER_INVOCATIONS_BIT = 0x00000200,
			VK_QUERY_PIPELINE_STATISTIC_COMPUTE_SHADER_INVOCATIONS_BIT = 0x00000400,
			VK_QUERY_PIPELINE_STATISTIC_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
		}

		private enum VkCommandBufferUsageFlags
		{
			VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT = 0x00000001,
			VK_COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT = 0x00000002,
			VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT = 0x00000004,
			VK_COMMAND_BUFFER_USAGE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
		}

		private enum VkSubpassContents
		{
			VK_SUBPASS_CONTENTS_INLINE = 0,
			VK_SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS = 1,
		}

		private enum VkCommandBufferResetFlags
		{
			VK_COMMAND_BUFFER_RESET_RELEASE_RESOURCES_BIT = 0x00000001,
			VK_COMMAND_BUFFER_RESET_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
		}

		private enum VkFenceCreateFlags
		{
			VK_FENCE_CREATE_SIGNALED_BIT = 0x00000001,
			VK_FENCE_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
		}

		private enum VkFilter
		{
			VK_FILTER_NEAREST = 0,
			VK_FILTER_LINEAR = 1,
			VK_FILTER_CUBIC_IMG = 1000015000,
			VK_FILTER_CUBIC_EXT = VK_FILTER_CUBIC_IMG,
			VK_FILTER_MAX_ENUM = 0x7FFFFFFF
		}

		private enum VkStencilFaceFlags
		{
			VK_STENCIL_FACE_FRONT_BIT = 0x00000001,
			VK_STENCIL_FACE_BACK_BIT = 0x00000002,
			VK_STENCIL_FACE_FRONT_AND_BACK = 0x00000003,
			VK_STENCIL_FRONT_AND_BACK = VK_STENCIL_FACE_FRONT_AND_BACK,
			VK_STENCIL_FACE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
		}

		#endregion

		#region Private Constants

		private const int VK_MAX_EXTENSION_NAME_SIZE = 256;
		private const int VK_MAX_DESCRIPTION_SIZE = 256;
		private const int VK_MAX_PHYSICAL_DEVICE_NAME_SIZE = 256;
		private const int VK_MAX_MEMORY_TYPES = 32;
		private const int VK_MAX_MEMORY_HEAPS = 16;
		private const int VK_UUID_SIZE = 16;
		private const uint VK_SUBPASS_EXTERNAL = (~0U);

		#endregion

		#region Private Structs

		private unsafe struct VkApplicationInfo
		{
			public VkStructureType sType;
			public IntPtr pNext;
			public IntPtr pApplicationName;
			public uint applicationVersion;
			public IntPtr pEngineName;
			public uint engineVersion;
			public uint apiVersion;
		}

		private unsafe struct VkInstanceCreateInfo
		{
			public VkStructureType sType;
			public IntPtr pNext;
			public uint flags;
			public VkApplicationInfo* pApplicationInfo;
			public uint enabledLayerCount;
			public IntPtr ppEnabledLayerNames;
			public uint enabledExtensionCount;
			public IntPtr ppEnabledExtensionNames;
		}

		private unsafe struct VkExtensionProperties
		{
			public fixed byte extensionName[VK_MAX_EXTENSION_NAME_SIZE];
			public uint specVersion;
		}

		private unsafe struct VkLayerProperties
		{
			public fixed byte layerName[VK_MAX_EXTENSION_NAME_SIZE];
			public uint specVersion;
			public uint implementationVersion;
			public fixed byte description[VK_MAX_DESCRIPTION_SIZE];
		}

		private unsafe struct VkPhysicalDeviceProperties
		{
			public uint apiVersion;
			public uint driverVersion;
			public uint vendorID;
			public uint deviceID;
			public VkPhysicalDeviceType deviceType;
			public fixed byte deviceName[VK_MAX_PHYSICAL_DEVICE_NAME_SIZE];
			public fixed byte pipelineCacheUUID[VK_UUID_SIZE];
			public VkPhysicalDeviceLimits limits;
			public VkPhysicalDeviceSparseProperties sparseProperties;
		}

		struct VkPhysicalDeviceLimits
		{
			public uint maxImageDimension1D;
			public uint maxImageDimension2D;
			public uint maxImageDimension3D;
			public uint maxImageDimensionCube;
			public uint maxImageArrayLayers;
			public uint maxTexelBufferElements;
			public uint maxUniformBufferRange;
			public uint maxStorageBufferRange;
			public uint maxPushConstantsSize;
			public uint maxMemoryAllocationCount;
			public uint maxSamplerAllocationCount;
			public ulong bufferImageGranularity;
			public ulong sparseAddressSpaceSize;
			public uint maxBoundDescriptorSets;
			public uint maxPerStageDescriptorSamplers;
			public uint maxPerStageDescriptorUniformBuffers;
			public uint maxPerStageDescriptorStorageBuffers;
			public uint maxPerStageDescriptorSampledImages;
			public uint maxPerStageDescriptorStorageImages;
			public uint maxPerStageDescriptorInputAttachments;
			public uint maxPerStageResources;
			public uint maxDescriptorSetSamplers;
			public uint maxDescriptorSetUniformBuffers;
			public uint maxDescriptorSetUniformBuffersDynamic;
			public uint maxDescriptorSetStorageBuffers;
			public uint maxDescriptorSetStorageBuffersDynamic;
			public uint maxDescriptorSetSampledImages;
			public uint maxDescriptorSetStorageImages;
			public uint maxDescriptorSetInputAttachments;
			public uint maxVertexInputAttributes;
			public uint maxVertexInputBindings;
			public uint maxVertexInputAttributeOffset;
			public uint maxVertexInputBindingStride;
			public uint maxVertexOutputComponents;
			public uint maxTessellationGenerationLevel;
			public uint maxTessellationPatchSize;
			public uint maxTessellationControlPerVertexInputComponents;
			public uint maxTessellationControlPerVertexOutputComponents;
			public uint maxTessellationControlPerPatchOutputComponents;
			public uint maxTessellationControlTotalOutputComponents;
			public uint maxTessellationEvaluationInputComponents;
			public uint maxTessellationEvaluationOutputComponents;
			public uint maxGeometryShaderInvocations;
			public uint maxGeometryInputComponents;
			public uint maxGeometryOutputComponents;
			public uint maxGeometryOutputVertices;
			public uint maxGeometryTotalOutputComponents;
			public uint maxFragmentInputComponents;
			public uint maxFragmentOutputAttachments;
			public uint maxFragmentDualSrcAttachments;
			public uint maxFragmentCombinedOutputResources;
			public uint maxComputeSharedMemorySize;
			public uint maxComputeWorkGroupCount_0;
			public uint maxComputeWorkGroupCount_1;
			public uint maxComputeWorkGroupCount_2;
			public uint maxComputeWorkGroupInvocations;
			public uint maxComputeWorkGroupSize_0;
			public uint maxComputeWorkGroupSize_1;
			public uint maxComputeWorkGroupSize_2;
			public uint subPixelPrecisionBits;
			public uint subTexelPrecisionBits;
			public uint mipmapPrecisionBits;
			public uint maxDrawIndexedIndexValue;
			public uint maxDrawIndirectCount;
			public float maxSamplerLodBias;
			public float maxSamplerAnisotropy;
			public uint maxViewports;
			public uint maxViewportDimensions_X;
			public uint maxViewportDimensions_Y;
			public float viewportBoundsRange_X;
			public float viewportBoundsRange_Y;
			public uint viewportSubPixelBits;
			public uint minMemoryMapAlignment; // FIXME: size_t?
			public ulong minTexelBufferOffsetAlignment;
			public ulong minUniformBufferOffsetAlignment;
			public ulong minStorageBufferOffsetAlignment;
			public int minTexelOffset;
			public uint maxTexelOffset;
			public int minTexelGatherOffset;
			public uint maxTexelGatherOffset;
			public float minInterpolationOffset;
			public float maxInterpolationOffset;
			public uint subPixelInterpolationOffsetBits;
			public uint maxFramebufferWidth;
			public uint maxFramebufferHeight;
			public uint maxFramebufferLayers;
			public VkSampleCountFlags framebufferColorSampleCounts;
			public VkSampleCountFlags framebufferDepthSampleCounts;
			public VkSampleCountFlags framebufferStencilSampleCounts;
			public VkSampleCountFlags framebufferNoAttachmentsSampleCounts;
			public uint maxColorAttachments;
			public VkSampleCountFlags sampledImageColorSampleCounts;
			public VkSampleCountFlags sampledImageIntegerSampleCounts;
			public VkSampleCountFlags sampledImageDepthSampleCounts;
			public VkSampleCountFlags sampledImageStencilSampleCounts;
			public VkSampleCountFlags storageImageSampleCounts;
			public uint maxSampleMaskWords;
			public uint timestampComputeAndGraphics;
			public float timestampPeriod;
			public uint maxClipDistances;
			public uint maxCullDistances;
			public uint maxCombinedClipAndCullDistances;
			public uint discreteQueuePriorities;
			public float pointSizeRange_MIN;
			public float pointSizeRange_MAX;
			public float lineWidthRange_MIN;
			public float lineWidthRange_MAX;
			public float pointSizeGranularity;
			public float lineWidthGranularity;
			public uint strictLines;
			public uint standardSampleLocations;
			public ulong optimalBufferCopyOffsetAlignment;
			public ulong optimalBufferCopyRowPitchAlignment;
			public ulong nonCoherentAtomSize;
		}

		struct VkPhysicalDeviceSparseProperties
		{
			public uint residencyStandard2DBlockShape;
			public uint residencyStandard2DMultisampleBlockShape;
			public uint residencyStandard3DBlockShape;
			public uint residencyAlignedMipSize;
			public uint residencyNonResidentStrict;
		}

		struct VkPhysicalDeviceFeatures
		{
			public uint robustBufferAccess;
			public uint fullDrawIndexUint32;
			public uint imageCubeArray;
			public uint independentBlend;
			public uint geometryShader;
			public uint tessellationShader;
			public uint sampleRateShading;
			public uint dualSrcBlend;
			public uint logicOp;
			public uint multiDrawIndirect;
			public uint drawIndirectFirstInstance;
			public uint depthClamp;
			public uint depthBiasClamp;
			public uint fillModeNonSolid;
			public uint depthBounds;
			public uint wideLines;
			public uint largePoints;
			public uint alphaToOne;
			public uint multiViewport;
			public uint samplerAnisotropy;
			public uint textureCompressionETC2;
			public uint textureCompressionASTC_LDR;
			public uint textureCompressionBC;
			public uint occlusionQueryPrecise;
			public uint pipelineStatisticsQuery;
			public uint vertexPipelineStoresAndAtomics;
			public uint fragmentStoresAndAtomics;
			public uint shaderTessellationAndGeometryPointSize;
			public uint shaderImageGatherExtended;
			public uint shaderStorageImageExtendedFormats;
			public uint shaderStorageImageMultisample;
			public uint shaderStorageImageReadWithoutFormat;
			public uint shaderStorageImageWriteWithoutFormat;
			public uint shaderUniformBufferArrayDynamicIndexing;
			public uint shaderSampledImageArrayDynamicIndexing;
			public uint shaderStorageBufferArrayDynamicIndexing;
			public uint shaderStorageImageArrayDynamicIndexing;
			public uint shaderClipDistance;
			public uint shaderCullDistance;
			public uint shaderFloat64;
			public uint shaderInt64;
			public uint shaderInt16;
			public uint shaderResourceResidency;
			public uint shaderResourceMinLod;
			public uint sparseBinding;
			public uint sparseResidencyBuffer;
			public uint sparseResidencyImage2D;
			public uint sparseResidencyImage3D;
			public uint sparseResidency2Samples;
			public uint sparseResidency4Samples;
			public uint sparseResidency8Samples;
			public uint sparseResidency16Samples;
			public uint sparseResidencyAliased;
			public uint variableMultisampleRate;
			public uint inheritedQueries;
		}

		private struct VkExtent2D
		{
			public uint width;
			public uint height;

			public VkExtent2D(uint w, uint h)
			{
				width = w;
				height = h;
			}
		}

		private struct VkExtent3D
		{
			public uint width;
			public uint height;
			public uint depth;

			public VkExtent3D(uint w, uint h, uint d)
			{
				width = w;
				height = h;
				depth = d;
			}
		}

		private struct VkQueueFamilyProperties
		{
			public VkQueueFlags queueFlags;
			public uint queueCount;
			public uint timestampValidBits;
			public VkExtent3D minImageTransferGranularity;
		}

		private unsafe struct VkDeviceCreateInfo
		{
			public VkStructureType sType;
			public IntPtr pNext;
			public uint flags;
			public uint queueCreateInfoCount;
			public VkDeviceQueueCreateInfo* pQueueCreateInfos;
			public uint enabledLayerCount;
			public IntPtr* ppEnabledLayerNames;
			public uint enabledExtensionCount;
			public IntPtr* ppEnabledExtensionNames;
			public VkPhysicalDeviceFeatures* pEnabledFeatures;
		}

		private unsafe struct VkDeviceQueueCreateInfo
		{
			public VkStructureType sType;
			public IntPtr pNext;
			public VkDeviceQueueCreateFlags flags;
			public uint queueFamilyIndex;
			public uint queueCount;
			public float* pQueuePriorities;
		}

		private struct VkSurfaceCapabilitiesKHR
		{
			public uint minImageCount;
			public uint maxImageCount;
			public VkExtent2D currentExtent;
			public VkExtent2D minImageExtent;
			public VkExtent2D maxImageExtent;
			public uint maxImageArrayLayers;
			public VkSurfaceTransformFlagsKHR supportedTransforms;
			public VkSurfaceTransformFlagsKHR currentTransform;
			public VkCompositeAlphaFlagsKHR supportedCompositeAlpha;
			public VkImageUsageFlags supportedUsageFlags;
		}

		private unsafe struct VkDebugUtilsMessengerCallbackDataEXT
		{
			public VkStructureType sType;
			public IntPtr pNext;
			public uint flags;
			public IntPtr pMessageIdName;
			public int messageIdNumber;
			public IntPtr pMessage;
			public uint queueLabelCount;
			public VkDebugUtilsLabelEXT* pQueueLabels;
			public uint cmdBufLabelCount;
			public VkDebugUtilsLabelEXT* pCmdBufLabels;
			public uint objectCount;
			public VkDebugUtilsObjectNameInfoEXT* pObjects;
		}

		private struct VkDebugUtilsLabelEXT
		{
			public VkStructureType sType;
			public IntPtr pNext;
			public IntPtr pLabelName;
			public float color_0;
			public float color_1;
			public float color_2;
			public float color_3;
		}

		private struct VkDebugUtilsObjectNameInfoEXT
		{
			public VkStructureType sType;
			public IntPtr pNext;
			public VkObjectType objectType;
			public ulong objectHandle;
			public IntPtr pObjectName;
		}

		private struct VkDebugUtilsMessengerCreateInfoEXT
		{
			public VkStructureType sType;
			public IntPtr pNext;
			public uint flags;
			public VkDebugUtilsMessageSeverityFlagsEXT messageSeverity;
			public VkDebugUtilsMessageTypeFlagsEXT messageType;
			public IntPtr pfnUserCallback;
			public IntPtr pUserData;
		}

		private struct VkSurfaceFormatKHR
		{
			public VkFormat format;
			public VkColorSpaceKHR colorSpace;
		}

		private struct VkFormatProperties
		{
			public VkFormatFeatureFlags linearTilingFeatures;
			public VkFormatFeatureFlags optimalTilingFeatures;
			public VkFormatFeatureFlags bufferFeatures;
		}

		private unsafe struct VkFramebufferCreateInfo
		{
			public VkStructureType sType;
			public IntPtr pNext;
			public VkFramebufferCreateFlags flags;
			public ulong renderPass;
			public uint attachmentCount;
			public ulong* pAttachments;
			public uint width;
			public uint height;
			public uint layers;
		}

		private struct VkImageViewCreateInfo
		{
			public VkStructureType sType;
			public IntPtr pNext;
			public VkImageViewCreateFlags flags;
			public ulong image;
			public VkImageViewType viewType;
			public VkFormat format;
			public VkComponentMapping components;
			public VkImageSubresourceRange subresourceRange;
		}

		private struct VkComponentMapping
		{
			public VkComponentSwizzle r;
			public VkComponentSwizzle g;
			public VkComponentSwizzle b;
			public VkComponentSwizzle a;

			public static VkComponentMapping Identity
			{
				get
				{
					return new VkComponentMapping
					{
						r = VkComponentSwizzle.VK_COMPONENT_SWIZZLE_IDENTITY,
						g = VkComponentSwizzle.VK_COMPONENT_SWIZZLE_IDENTITY,
						b = VkComponentSwizzle.VK_COMPONENT_SWIZZLE_IDENTITY,
						a = VkComponentSwizzle.VK_COMPONENT_SWIZZLE_IDENTITY
					};
				}
			}
		}

		private struct VkImageSubresourceRange
		{
			public VkImageAspectFlags aspectMask;
			public uint baseMipLevel;
			public uint levelCount;
			public uint baseArrayLayer;
			public uint layerCount;
		}

		private unsafe struct VkImageCreateInfo
		{
			public VkStructureType sType;
			public IntPtr pNext;
			public VkImageCreateFlags flags;
			public VkImageType imageType;
			public VkFormat format;
			public VkExtent3D extent;
			public uint mipLevels;
			public uint arrayLayers;
			public VkSampleCountFlags samples;
			public VkImageTiling tiling;
			public VkImageUsageFlags usage;
			public VkSharingMode sharingMode;
			public uint queueFamilyIndexCount;
			public uint* pQueueFamilyIndices;
			public VkImageLayout initialLayout;
		}

		private unsafe struct VkSwapchainCreateInfoKHR
		{
			public VkStructureType sType;
			public IntPtr pNext;
			public VkSwapchainCreateFlagsKHR flags;
			public ulong surface;
			public uint minImageCount;
			public VkFormat imageFormat;
			public VkColorSpaceKHR imageColorSpace;
			public VkExtent2D imageExtent;
			public uint imageArrayLayers;
			public VkImageUsageFlags imageUsage;
			public VkSharingMode imageSharingMode;
			public uint queueFamilyIndexCount;
			public uint* pQueueFamilyIndices;
			public VkSurfaceTransformFlagsKHR preTransform;
			public VkCompositeAlphaFlagsKHR compositeAlpha;
			public VkPresentModeKHR presentMode;
			public uint clipped;
			public ulong oldSwapchain;
		}

		private struct VkSpecializationMapEntry
		{
			public uint constantID;
			public uint offset;
			public uint size; // FIXME: size_t?
		}

		private unsafe struct VkSpecializationInfo
		{
			public uint mapEntryCount;
			public VkSpecializationMapEntry* pMapEntries;
			public uint dataSize; // FIXME: size_t?
			public void* pData;
		}

		private unsafe struct VkPipelineShaderStageCreateInfo
		{
			public VkStructureType sType;
			public IntPtr pNext;
			public VkPipelineShaderStageCreateFlags flags;
			public VkShaderStageFlags stage;
			public ulong module;
			public IntPtr pName;
			public VkSpecializationInfo* pSpecializationInfo;
		}

		private struct VkVertexInputAttributeDescription
		{
			public uint location;
			public uint binding;
			public VkFormat format;
			public uint offset;
		}

		private unsafe struct VkPipelineVertexInputStateCreateInfo
		{
			public VkStructureType sType;
			public IntPtr pNext;
			public uint flags;
			public uint vertexBindingDescriptionCount;
			public VkVertexInputBindingDescription* pVertexBindingDescriptions;
			public uint vertexAttributeDescriptionCount;
			public VkVertexInputAttributeDescription* pVertexAttributeDescriptions;
		}

		private struct VkVertexInputBindingDescription
		{
			public uint binding;
			public uint stride;
			public VkVertexInputRate inputRate;
		}

		private struct VkPipelineInputAssemblyStateCreateInfo
		{
			public VkStructureType sType;
			public IntPtr pNext;
			public uint flags;
			public VkPrimitiveTopology topology;
			public uint primitiveRestartEnable;
		}

		private struct VkPipelineTessellationStateCreateInfo
		{
			public VkStructureType sType;
			public IntPtr pNext;
			public uint flags;
			public uint patchControlPoints;
		}

		private struct VkViewport
		{
			public float x;
			public float y;
			public float width;
			public float height;
			public float minDepth;
			public float maxDepth;
		}

		struct VkOffset2D
		{
			public int x;
			public int y;
		}

		private struct VkRect2D
		{
			public VkOffset2D offset;
			public VkExtent2D extent;
		}

		private unsafe struct VkPipelineViewportStateCreateInfo
		{
			public VkStructureType sType;
			public IntPtr pNext;
			public uint flags;
			public uint viewportCount;
			public VkViewport* pViewports;
			public uint scissorCount;
			public VkRect2D* pScissors;
		}

		private struct VkPipelineRasterizationStateCreateInfo
		{
			public VkStructureType sType;
			public IntPtr pNext;
			public uint flags;
			public uint depthClampEnable;
			public uint rasterizerDiscardEnable;
			public VkPolygonMode polygonMode;
			public VkCullModeFlags cullMode;
			public VkFrontFace frontFace;
			public uint depthBiasEnable;
			public float depthBiasConstantFactor;
			public float depthBiasClamp;
			public float depthBiasSlopeFactor;
			public float lineWidth;
		}

		private unsafe struct VkPipelineMultisampleStateCreateInfo
		{
			public VkStructureType sType;
			public IntPtr pNext;
			public uint flags;
			public VkSampleCountFlags rasterizationSamples;
			public uint sampleShadingEnable;
			public float minSampleShading;
			public uint* pSampleMask;
			public uint alphaToCoverageEnable;
			public uint alphaToOneEnable;
		}

		private struct VkStencilOpState
		{
			public VkStencilOp failOp;
			public VkStencilOp passOp;
			public VkStencilOp depthFailOp;
			public VkCompareOp compareOp;
			public uint compareMask;
			public uint writeMask;
			public uint reference;
		}

		private struct VkPipelineDepthStencilStateCreateInfo
		{
			public VkStructureType sType;
			public IntPtr pNext;
			public uint flags;
			public uint depthTestEnable;
			public uint depthWriteEnable;
			public VkCompareOp depthCompareOp;
			public uint depthBoundsTestEnable;
			public uint stencilTestEnable;
			public VkStencilOpState front;
			public VkStencilOpState back;
			public float minDepthBounds;
			public float maxDepthBounds;
		}

		private struct VkPipelineColorBlendAttachmentState
		{
			public uint blendEnable;
			public VkBlendFactor srcColorBlendFactor;
			public VkBlendFactor dstColorBlendFactor;
			public VkBlendOp colorBlendOp;
			public VkBlendFactor srcAlphaBlendFactor;
			public VkBlendFactor dstAlphaBlendFactor;
			public VkBlendOp alphaBlendOp;
			public VkColorComponentFlags colorWriteMask;
		}

		private unsafe struct VkPipelineColorBlendStateCreateInfo
		{
			public VkStructureType sType;
			public IntPtr pNext;
			public uint flags;
			public uint logicOpEnable;
			public VkLogicOp logicOp;
			public uint attachmentCount;
			public VkPipelineColorBlendAttachmentState* pAttachments;
			public float blendConstants_r;
			public float blendConstants_g;
			public float blendConstants_b;
			public float blendConstants_a;
		}

		private unsafe struct VkPipelineDynamicStateCreateInfo
		{
			public VkStructureType sType;
			public IntPtr pNext;
			public uint flags;
			public uint dynamicStateCount;
			public VkDynamicState* pDynamicStates;
		}

		private unsafe struct VkGraphicsPipelineCreateInfo
		{
			public VkStructureType sType;
			public IntPtr pNext;
			public VkPipelineCreateFlags flags;
			public uint stageCount;
			public VkPipelineShaderStageCreateInfo* pStages;
			public VkPipelineVertexInputStateCreateInfo* pVertexInputState;
			public VkPipelineInputAssemblyStateCreateInfo* pInputAssemblyState;
			public VkPipelineTessellationStateCreateInfo* pTessellationState;
			public VkPipelineViewportStateCreateInfo* pViewportState;
			public VkPipelineRasterizationStateCreateInfo* pRasterizationState;
			public VkPipelineMultisampleStateCreateInfo* pMultisampleState;
			public VkPipelineDepthStencilStateCreateInfo* pDepthStencilState;
			public VkPipelineColorBlendStateCreateInfo* pColorBlendState;
			public VkPipelineDynamicStateCreateInfo* pDynamicState;
			public ulong layout;
			public ulong renderPass;
			public uint subpass;
			public ulong basePipelineHandle;
			public int basePipelineIndex;
		}

		private struct VkPushConstantRange
		{
			public VkShaderStageFlags stageFlags;
			public uint offset;
			public uint size;
		}

		private unsafe struct VkPipelineLayoutCreateInfo
		{
			public VkStructureType sType;
			public IntPtr pNext;
			public uint flags;
			public uint setLayoutCount;
			public ulong* pSetLayouts;
			public uint pushConstantRangeCount;
			public VkPushConstantRange* pPushConstantRanges;
		}

		private struct VkBufferCopy
		{
			public ulong srcOffset;
			public ulong dstOffset;
			public ulong size;
		}

		private unsafe struct VkBufferCreateInfo
		{
			public VkStructureType sType;
			public IntPtr pNext;
			public VkBufferCreateFlags flags;
			public ulong size;
			public VkBufferUsageFlags usage;
			public VkSharingMode sharingMode;
			public uint queueFamilyIndexCount;
			public uint* pQueueFamilyIndices;
		}

		private struct VkMappedMemoryRange
		{
			public VkStructureType sType;
			public IntPtr pNext;
			public ulong memory;
			public ulong offset;
			public ulong size;
		}

		private struct VkMemoryAllocateInfo
		{
			public VkStructureType sType;
			public IntPtr pNext;
			public ulong allocationSize;
			public uint memoryTypeIndex;
		}

		private struct VkMemoryRequirements
		{
			public ulong size;
			public ulong alignment;
			public uint memoryTypeBits;
		}

		private struct VkMemoryHeap
		{
			public ulong size;
			public VkMemoryHeapFlags flags;
		}

		private struct VkMemoryType
		{
			public VkMemoryPropertyFlags propertyFlags;
			public uint heapIndex;
		}

		private struct VkPhysicalDeviceMemoryProperties
		{
			public uint memoryTypeCount;

			[MarshalAs(UnmanagedType.ByValArray, SizeConst = VK_MAX_MEMORY_TYPES)]
			public VkMemoryType[] memoryTypes;

			public uint memoryHeapCount;

			[MarshalAs(UnmanagedType.ByValArray, SizeConst = VK_MAX_MEMORY_HEAPS)]
			public VkMemoryHeap[] memoryHeaps;
		}

		private struct VkAttachmentDescription
		{
			public VkAttachmentDescriptionFlags flags;
			public VkFormat format;
			public VkSampleCountFlags samples;
			public VkAttachmentLoadOp loadOp;
			public VkAttachmentStoreOp storeOp;
			public VkAttachmentLoadOp stencilLoadOp;
			public VkAttachmentStoreOp stencilStoreOp;
			public VkImageLayout initialLayout;
			public VkImageLayout finalLayout;
		}

		private struct VkAttachmentReference
		{
			public uint attachment;
			public VkImageLayout layout;
		}

		private unsafe struct VkSubpassDescription
		{
			public VkSubpassDescriptionFlags flags;
			public VkPipelineBindPoint pipelineBindPoint;
			public uint inputAttachmentCount;
			public VkAttachmentReference* pInputAttachments;
			public uint colorAttachmentCount;
			public VkAttachmentReference* pColorAttachments;
			public VkAttachmentReference* pResolveAttachments;
			public VkAttachmentReference* pDepthStencilAttachment;
			public uint preserveAttachmentCount;
			public uint* pPreserveAttachments;
		}

		private struct VkSubpassDependency
		{
			public uint srcSubpass;
			public uint dstSubpass;
			public VkPipelineStageFlags srcStageMask;
			public VkPipelineStageFlags dstStageMask;
			public VkAccessFlags srcAccessMask;
			public VkAccessFlags dstAccessMask;
			public VkDependencyFlags dependencyFlags;
		}

		private unsafe struct VkRenderPassCreateInfo
		{
			public VkStructureType sType;
			public IntPtr pNext;
			public uint flags;
			public uint attachmentCount;
			public VkAttachmentDescription* pAttachments;
			public uint subpassCount;
			public VkSubpassDescription* pSubpasses;
			public uint dependencyCount;
			public VkSubpassDependency* pDependencies;
		}

		// No unions in C#, so, uh, here's this...
		[StructLayout(LayoutKind.Explicit)]
		private struct VkClearValue
		{
			[FieldOffset(0)] public VkClearColorValue color;
			[FieldOffset(0)] public VkClearDepthStencilValue depthStencil;
		}

		[StructLayout(LayoutKind.Explicit)]
		private unsafe struct VkClearColorValue
		{
			[FieldOffset(0)] public fixed float float32[4];
			[FieldOffset(0)] public fixed int int32[4];
			[FieldOffset(0)] public fixed uint uint32[4];
		}

		private struct VkClearDepthStencilValue
		{
			public float depth;
			public uint stencil;
		}

		private struct VkClearAttachment
		{
			public VkImageAspectFlags aspectMask;
			public uint colorAttachment;
			public VkClearValue clearValue;
		}

		private struct VkClearRect
		{
			public VkRect2D rect;
			public uint baseArrayLayer;
			public uint layerCount;
		}

		private struct VkCommandPoolCreateInfo
		{
			public VkStructureType sType;
			public IntPtr pNext;
			public VkCommandPoolCreateFlags flags;
			public uint queueFamilyIndex;
		}

		private struct VkCommandBufferAllocateInfo
		{
			public VkStructureType sType;
			public IntPtr pNext;
			public ulong commandPool;
			public VkCommandBufferLevel level;
			public uint commandBufferCount;
		}

		private struct VkCommandBufferInheritanceInfo
		{
			public VkStructureType sType;
			public IntPtr pNext;
			public ulong renderPass;
			public uint subpass;
			public ulong framebuffer;
			public uint occlusionQueryEnable;
			public VkQueryControlFlags queryFlags;
			public VkQueryPipelineStatisticFlags pipelineStatistics;
		}

		private unsafe struct VkCommandBufferBeginInfo
		{
			public VkStructureType sType;
			public IntPtr pNext;
			public VkCommandBufferUsageFlags flags;
			public VkCommandBufferInheritanceInfo* pInheritanceInfo;
		}

		private unsafe struct VkRenderPassBeginInfo
		{
			public VkStructureType sType;
			public IntPtr pNext;
			public ulong renderPass;
			public ulong framebuffer;
			public VkRect2D renderArea;
			public uint clearValueCount;
			public VkClearValue* pClearValues;
		}

		private unsafe struct VkSubmitInfo
		{
			public VkStructureType sType;
			public IntPtr pNext;
			public uint waitSemaphoreCount;
			public ulong* pWaitSemaphores;
			public VkPipelineStageFlags* pWaitDstStageMask;
			public uint commandBufferCount;
			public IntPtr* pCommandBuffers;
			public uint signalSemaphoreCount;
			public ulong* pSignalSemaphores;
		}

		private struct VkFenceCreateInfo
		{
			public VkStructureType sType;
			public IntPtr pInfo;
			public VkFenceCreateFlags flags;
		}

		private struct VkSemaphoreCreateInfo
		{
			public VkStructureType sType;
			public IntPtr pNext;
			public uint flags;
		}

		private unsafe struct VkPresentInfoKHR
		{
			public VkStructureType sType;
			public IntPtr pNext;
			public uint waitSemaphoreCount;
			public ulong* pWaitSemaphores;
			public uint swapchainCount;
			public ulong* pSwapchains;
			public uint* pImageIndices;
			public VkResult* pResults;
		}

		private struct VkImageSubresourceLayers
		{
			public VkImageAspectFlags aspectMask;
			public uint mipLevel;
			public uint baseArrayLayer;
			public uint layerCount;
		}

		private struct VkOffset3D
		{
			public int x;
			public int y;
			public int z;
		}

		private struct VkImageBlit
		{
			public VkImageSubresourceLayers srcSubresource;
			public VkOffset3D srcOffsets_0;
			public VkOffset3D srcOffsets_1;
			public VkImageSubresourceLayers dstSubresource;
			public VkOffset3D dstOffsets_0;
			public VkOffset3D dstOffsets_1;
		}

		#endregion

		#region UTF8 Marshaling

		// Modified slightly from SDL2#
		private unsafe IntPtr UTF8_ToNative(string s)
		{
			if (s == null)
			{
				return IntPtr.Zero;
			}

			// Add a null terminator. That's kind of it... :/
			byte[] bytes = System.Text.Encoding.UTF8.GetBytes(s + '\0');
			fixed (byte* ptr = bytes)
			{
				return (IntPtr) ptr;
			}
		}

		// Modified slightly from SDL2#
		private unsafe string UTF8_ToManaged(IntPtr s)
		{
			if (s == IntPtr.Zero)
			{
				return null;
			}

			/* We get to do strlen ourselves! */
			byte* ptr = (byte*)s;
			while (*ptr != 0)
			{
				ptr++;
			}

			/* TODO: This #ifdef is only here because the equivalent
			 * .NET 2.0 constructor appears to be less efficient?
			 * Here's the pretty version, maybe steal this instead:
			 *
			string result = new string(
				(sbyte*) s, // Also, why sbyte???
				0,
				(int) (ptr - (byte*) s),
				System.Text.Encoding.UTF8
			);
			 * See the CoreCLR source for more info.
			 * -flibit
			 */
#if NETSTANDARD2_0
			/* Modern C# lets you just send the byte*, nice! */
			string result = System.Text.Encoding.UTF8.GetString(
				(byte*) s,
				(int) (ptr - (byte*) s)
			);
#else
			/* Old C# requires an extra memcpy, bleh! */
			int len = (int) (ptr - (byte*) s);
			if (len == 0)
			{
				return string.Empty;
			}
			char* chars = stackalloc char[len];
			int strLen = System.Text.Encoding.UTF8.GetChars((byte*) s, len, chars, len);
			string result = new string(chars, 0, strLen);
#endif
			return result;
		}

		#endregion

		#region Adapted Macros

		private uint VK_MAKE_VERSION(uint major, uint minor, uint patch)
		{
			return (major << 22) | (minor << 12) | patch;
		}

		private uint VK_VERSION_MAJOR(uint version)
		{
			return version >> 22;
		}

		private uint VK_VERSION_MINOR(uint version)
		{
			return (version >> 12) & 0x3ff;
		}

		private uint VK_VERSION_PATCH(uint version)
		{
			return version & 0xfff;
		}

		private string VK_GetVersionString(uint version)
		{
			return VK_VERSION_MAJOR(version) + "."
				+ VK_VERSION_MINOR(version) + "."
				+ VK_VERSION_PATCH(version);
		}

		#endregion

		#region Private Vulkan Entry Loaders

		private Delegate GetProcAddress(string name, Type type)
		{
			IntPtr addr = vkGetInstanceProcAddr(Instance, name);
			if (addr == IntPtr.Zero)
			{
				throw new Exception(name);
			}
			return Marshal.GetDelegateForFunctionPointer(addr, type);
		}

		public void LoadGlobalEntryPoints()
		{
			// First load the function loader
			vkGetInstanceProcAddr = (PFN_GetInstanceProcAddr) Marshal.GetDelegateForFunctionPointer(
				SDL.SDL_Vulkan_GetVkGetInstanceProcAddr(),
				typeof(PFN_GetInstanceProcAddr)
			);

			// Now load global entry points
			vkCreateInstance = (PFN_CreateInstance) GetProcAddress(
				"vkCreateInstance",
				typeof(PFN_CreateInstance)
			);
			vkEnumerateInstanceExtensionProperties = (PFN_EnumerateInstanceExtensionProperties) GetProcAddress(
				"vkEnumerateInstanceExtensionProperties",
				typeof(PFN_EnumerateInstanceExtensionProperties)
			);
			vkEnumerateInstanceLayerProperties = (PFN_EnumerateInstanceLayerProperties) GetProcAddress(
				"vkEnumerateInstanceLayerProperties",
				typeof(PFN_EnumerateInstanceLayerProperties)
			);
		}

		public void LoadInstanceEntryPoints()
		{
			// Instance
			vkDestroyInstance = (PFN_DestroyInstance) GetProcAddress(
				"vkDestroyInstance",
				typeof(PFN_DestroyInstance)
			);

			// Physical Device
			vkEnumeratePhysicalDevices = (PFN_EnumeratePhysicalDevices) GetProcAddress(
				"vkEnumeratePhysicalDevices",
				typeof(PFN_EnumeratePhysicalDevices)
			);
			vkGetPhysicalDeviceProperties = (PFN_GetPhysicalDeviceProperties) GetProcAddress(
				"vkGetPhysicalDeviceProperties",
				typeof(PFN_GetPhysicalDeviceProperties)
			);
			vkGetPhysicalDeviceFeatures = (PFN_GetPhysicalDeviceFeatures) GetProcAddress(
				"vkGetPhysicalDeviceFeatures",
				typeof(PFN_GetPhysicalDeviceFeatures)
			);
			vkGetPhysicalDeviceQueueFamilyProperties = (PFN_GetPhysicalDeviceQueueFamilyProperties) GetProcAddress(
				"vkGetPhysicalDeviceQueueFamilyProperties",
				typeof(PFN_GetPhysicalDeviceQueueFamilyProperties)
			);
			vkGetPhysicalDeviceFormatProperties = (PFN_GetPhysicalDeviceFormatProperties) GetProcAddress(
				"vkGetPhysicalDeviceFormatProperties",
				typeof(PFN_GetPhysicalDeviceFormatProperties)
			);
			vkGetPhysicalDeviceMemoryProperties = (PFN_GetPhysicalDeviceMemoryProperties) GetProcAddress(
				"vkGetPhysicalDeviceMemoryProperties",
				typeof(PFN_GetPhysicalDeviceMemoryProperties)
			);

			// Logical Device
			vkCreateDevice = (PFN_CreateDevice) GetProcAddress(
				"vkCreateDevice",
				typeof(PFN_CreateDevice)
			);
			vkDestroyDevice = (PFN_DestroyDevice) GetProcAddress(
				"vkDestroyDevice",
				typeof(PFN_DestroyDevice)
			);
			vkEnumerateDeviceExtensionProperties = (PFN_EnumerateDeviceExtensionProperties) GetProcAddress(
				"vkEnumerateDeviceExtensionProperties",
				typeof(PFN_EnumerateDeviceExtensionProperties)
			);
			vkGetDeviceQueue = (PFN_GetDeviceQueue) GetProcAddress(
				"vkGetDeviceQueue",
				typeof(PFN_GetDeviceQueue)
			);

			// Image / Image View
			vkCreateImage = (PFN_CreateImage) GetProcAddress(
				"vkCreateImage",
				typeof(PFN_CreateImage)
			);
			vkDestroyImage = (PFN_DestroyImage) GetProcAddress(
				"vkDestroyImage",
				typeof(PFN_DestroyImage)
			);
			vkCreateImageView = (PFN_CreateImageView) GetProcAddress(
				"vkCreateImageView",
				typeof(PFN_CreateImageView)
			);
			vkDestroyImageView = (PFN_DestroyImageView) GetProcAddress(
				"vkDestroyImageView",
				typeof(PFN_DestroyImageView)
			);
			vkBindImageMemory = (PFN_BindImageMemory) GetProcAddress(
				"vkBindImageMemory",
				typeof(PFN_BindImageMemory)
			);
			vkGetImageMemoryRequirements = (PFN_GetImageMemoryRequirements) GetProcAddress(
				"vkGetImageMemoryRequirements",
				typeof(PFN_GetImageMemoryRequirements)
			);

			// Buffers
			vkCreateBuffer = (PFN_CreateBuffer) GetProcAddress(
				"vkCreateBuffer",
				typeof(PFN_CreateBuffer)
			);
			vkDestroyBuffer = (PFN_DestroyBuffer) GetProcAddress(
				"vkDestroyBuffer",
				typeof(PFN_DestroyBuffer)
			);
			vkBindBufferMemory = (PFN_BindBufferMemory) GetProcAddress(
				"vkBindBufferMemory",
				typeof(PFN_BindBufferMemory)
			);
			vkGetBufferMemoryRequirements = (PFN_GetBufferMemoryRequirements) GetProcAddress(
				"vkGetBufferMemoryRequirements",
				typeof(PFN_GetBufferMemoryRequirements)
			);

			// Pipelines
			vkCreateGraphicsPipelines = (PFN_CreateGraphicsPipelines) GetProcAddress(
				"vkCreateGraphicsPipelines",
				typeof(PFN_CreateGraphicsPipelines)
			);
			vkCreatePipelineLayout = (PFN_CreatePipelineLayout) GetProcAddress(
				"vkCreatePipelineLayout",
				typeof(PFN_CreatePipelineLayout)
			);

			// Memory
			vkAllocateMemory = (PFN_AllocateMemory) GetProcAddress(
				"vkAllocateMemory",
				typeof(PFN_AllocateMemory)
			);
			vkFlushMappedMemoryRanges = (PFN_FlushMappedMemoryRanges) GetProcAddress(
				"vkFlushMappedMemoryRanges",
				typeof(PFN_FlushMappedMemoryRanges)
			);
			vkFreeMemory = (PFN_FreeMemory) GetProcAddress(
				"vkFreeMemory",
				typeof(PFN_FreeMemory)
			);
			vkInvalidateMappedMemoryRanges = (PFN_InvalidateMappedMemoryRanges) GetProcAddress(
				"vkInvalidateMappedMemoryRanges",
				typeof(PFN_InvalidateMappedMemoryRanges)
			);
			vkMapMemory = (PFN_MapMemory) GetProcAddress(
				"vkMapMemory",
				typeof(PFN_MapMemory)
			);
			vkUnmapMemory = (PFN_UnmapMemory) GetProcAddress(
				"vkUnmapMemory",
				typeof(PFN_UnmapMemory)
			);

			// Framebuffer
			vkCreateFramebuffer = (PFN_CreateFramebuffer) GetProcAddress(
				"vkCreateFramebuffer",
				typeof(PFN_CreateFramebuffer)
			);
			vkDestroyFramebuffer = (PFN_DestroyFramebuffer) GetProcAddress(
				"vkDestroyFramebuffer",
				typeof(PFN_DestroyFramebuffer)
			);

			// Render Pass
			vkCreateRenderPass = (PFN_CreateRenderPass) GetProcAddress(
				"vkCreateRenderPass",
				typeof(PFN_CreateRenderPass)
			);
			vkDestroyRenderPass = (PFN_DestroyRenderPass) GetProcAddress(
				"vkDestroyRenderPass",
				typeof(PFN_DestroyRenderPass)
			);

			// Command Buffers / Pools
			vkCreateCommandPool = (PFN_CreateCommandPool) GetProcAddress(
				"vkCreateCommandPool",
				typeof(PFN_CreateCommandPool)
			);
			vkAllocateCommandBuffers = (PFN_AllocateCommandBuffers) GetProcAddress(
				"vkAllocateCommandBuffers",
				typeof(PFN_AllocateCommandBuffers)
			);
			vkBeginCommandBuffer = (PFN_BeginCommandBuffer) GetProcAddress(
				"vkBeginCommandBuffer",
				typeof(PFN_BeginCommandBuffer)
			);
			vkResetCommandBuffer = (PFN_ResetCommandBuffer) GetProcAddress(
				"vkResetCommandBuffer",
				typeof(PFN_ResetCommandBuffer)
			);
			vkEndCommandBuffer = (PFN_EndCommandBuffer) GetProcAddress(
				"vkEndCommandBuffer",
				typeof(PFN_EndCommandBuffer)
			);

			// Queues
			vkQueueSubmit = (PFN_QueueSubmit) GetProcAddress(
				"vkQueueSubmit",
				typeof(PFN_QueueSubmit)
			);

			// Fence / Semaphore
			vkWaitForFences = (PFN_WaitForFences) GetProcAddress(
				"vkWaitForFences",
				typeof(PFN_WaitForFences)
			);
			vkCreateFence = (PFN_CreateFence) GetProcAddress(
				"vkCreateFence",
				typeof(PFN_CreateFence)
			);
			vkCreateSemaphore = (PFN_CreateSemaphore) GetProcAddress(
				"vkCreateSemaphore",
				typeof(PFN_CreateSemaphore)
			);

			// Commands
			vkCmdCopyBuffer = (PFN_CmdCopyBuffer) GetProcAddress(
				"vkCmdCopyBuffer",
				typeof(PFN_CmdCopyBuffer)
			);
			vkCmdClearAttachments = (PFN_CmdClearAttachments) GetProcAddress(
				"vkCmdClearAttachments",
				typeof(PFN_CmdClearAttachments)
			);
			vkCmdBeginRenderPass = (PFN_CmdBeginRenderPass) GetProcAddress(
				"vkCmdBeginRenderPass",
				typeof(PFN_CmdBeginRenderPass)
			);
			vkCmdEndRenderPass = (PFN_CmdEndRenderPass) GetProcAddress(
				"vkCmdEndRenderPass",
				typeof(PFN_CmdEndRenderPass)
			);
			vkCmdBlitImage = (PFN_CmdBlitImage) GetProcAddress(
				"vkCmdBlitImage",
				typeof(PFN_CmdBlitImage)
			);
			vkCmdSetBlendConstants = (PFN_CmdSetBlendConstants) GetProcAddress(
				"vkCmdSetBlendConstants",
				typeof(PFN_CmdSetBlendConstants)
			);
			vkCmdSetStencilReference = (PFN_CmdSetStencilReference) GetProcAddress(
				"vkCmdSetStencilReference",
				typeof(PFN_CmdSetStencilReference)
			);

			// Swapchain Extension

			/* If we got this far into the program,
			 * the instance must have the VK_KHR_surface
			 * extension. That implies the existence of
			 * VK_KHR_swapchain so we don't need to check!
			 * 
			 * -caleb
			 */

			vkDestroySurfaceKHR = (PFN_DestroySurfaceKHR) GetProcAddress(
				"vkDestroySurfaceKHR",
				typeof(PFN_DestroySurfaceKHR)
			);
			vkGetPhysicalDeviceSurfaceSupportKHR = (PFN_GetPhysicalDeviceSurfaceSupportKHR) GetProcAddress(
				"vkGetPhysicalDeviceSurfaceSupportKHR",
				typeof(PFN_GetPhysicalDeviceSurfaceSupportKHR)
			);
			vkGetPhysicalDeviceSurfaceCapabilitiesKHR = (PFN_GetPhysicalDeviceSurfaceCapabilitiesKHR) GetProcAddress(
				"vkGetPhysicalDeviceSurfaceCapabilitiesKHR",
				typeof(PFN_GetPhysicalDeviceSurfaceCapabilitiesKHR)
			);
			vkGetPhysicalDeviceSurfaceFormatsKHR = (PFN_GetPhysicalDeviceSurfaceFormatsKHR) GetProcAddress(
				"vkGetPhysicalDeviceSurfaceFormatsKHR",
				typeof(PFN_GetPhysicalDeviceSurfaceFormatsKHR)
			);
			vkGetPhysicalDeviceSurfacePresentModesKHR = (PFN_GetPhysicalDeviceSurfacePresentModesKHR) GetProcAddress(
				"vkGetPhysicalDeviceSurfacePresentModesKHR",
				typeof(PFN_GetPhysicalDeviceSurfacePresentModesKHR)
			);
			vkCreateSwapchainKHR = (PFN_CreateSwapchainKHR) GetProcAddress(
				"vkCreateSwapchainKHR",
				typeof(PFN_CreateSwapchainKHR)
			);
			vkDestroySwapchainKHR = (PFN_DestroySwapchainKHR) GetProcAddress(
				"vkDestroySwapchainKHR",
				typeof(PFN_DestroySwapchainKHR)
			);
			vkGetSwapchainImagesKHR = (PFN_GetSwapchainImagesKHR) GetProcAddress(
				"vkGetSwapchainImagesKHR",
				typeof(PFN_GetSwapchainImagesKHR)
			);
			vkAcquireNextImageKHR = (PFN_AcquireNextImageKHR) GetProcAddress(
				"vkAcquireNextImageKHR",
				typeof(PFN_AcquireNextImageKHR)
			);
			vkQueuePresentKHR = (PFN_QueuePresentKHR) GetProcAddress(
				"vkQueuePresentKHR",
				typeof(PFN_QueuePresentKHR)
			);

			// Debug Utils Extension
			if (validationEnabled)
			{
				vkCreateDebugUtilsMessengerEXT = (PFN_CreateDebugUtilsMessengerEXT) GetProcAddress(
					"vkCreateDebugUtilsMessengerEXT",
					typeof(PFN_CreateDebugUtilsMessengerEXT)
				);

				vkDestroyDebugUtilsMessengerEXT = (PFN_DestroyDebugUtilsMessengerEXT) GetProcAddress(
					"vkDestroyDebugUtilsMessengerEXT",
					typeof(PFN_DestroyDebugUtilsMessengerEXT)
				);
			}
		}

		#endregion

		#region Private Vulkan Entry Points

		private delegate IntPtr PFN_GetInstanceProcAddr(
			IntPtr instance,
			string name
		);
		private PFN_GetInstanceProcAddr vkGetInstanceProcAddr;

		private delegate VkResult PFN_CreateInstance(
			ref VkInstanceCreateInfo pCreateInfo,
			IntPtr pAllocator,
			out IntPtr pInstance
		);
		private PFN_CreateInstance vkCreateInstance;

		private delegate void PFN_DestroyInstance(
			IntPtr instance,
			IntPtr pAllocator
		);
		private PFN_DestroyInstance vkDestroyInstance;

		private unsafe delegate VkResult PFN_EnumerateInstanceExtensionProperties(
			string layerName,
			out uint propertyCount,
			VkExtensionProperties* pProperties
		);
		private PFN_EnumerateInstanceExtensionProperties vkEnumerateInstanceExtensionProperties;

		private unsafe delegate VkResult PFN_EnumerateInstanceLayerProperties(
			out uint propertyCount,
			VkLayerProperties* pProperties
		);
		private PFN_EnumerateInstanceLayerProperties vkEnumerateInstanceLayerProperties;

		private unsafe delegate VkResult PFN_EnumeratePhysicalDevices(
			IntPtr instance,
			out uint physicalDeviceCount,
			IntPtr* physicalDevices
		);
		private PFN_EnumeratePhysicalDevices vkEnumeratePhysicalDevices;

		private delegate void PFN_GetPhysicalDeviceProperties(
			IntPtr physicalDevice,
			out VkPhysicalDeviceProperties properties
		);
		private PFN_GetPhysicalDeviceProperties vkGetPhysicalDeviceProperties;

		private delegate void PFN_GetPhysicalDeviceFeatures(
			IntPtr physicalDevice,
			out VkPhysicalDeviceFeatures features
		);
		private PFN_GetPhysicalDeviceFeatures vkGetPhysicalDeviceFeatures;

		private unsafe delegate void PFN_GetPhysicalDeviceQueueFamilyProperties(
			IntPtr physicalDevice,
			out uint queueFamilyPropertyCount,
			VkQueueFamilyProperties* queueFamilies
		);
		private PFN_GetPhysicalDeviceQueueFamilyProperties vkGetPhysicalDeviceQueueFamilyProperties;

		private delegate VkResult PFN_CreateDevice(
			IntPtr physicalDevice,
			ref VkDeviceCreateInfo pCreateInfo,
			IntPtr pAllocator,
			out IntPtr device
		);
		private PFN_CreateDevice vkCreateDevice;

		private unsafe delegate VkResult PFN_EnumerateDeviceExtensionProperties(
			IntPtr physicalDevice,
			IntPtr pLayerName,
			out uint propertyCount,
			VkExtensionProperties* properties
		);
		private PFN_EnumerateDeviceExtensionProperties vkEnumerateDeviceExtensionProperties;

		private delegate void PFN_DestroyDevice(
			IntPtr device,
			IntPtr pAllocator
		);
		private PFN_DestroyDevice vkDestroyDevice;

		private delegate void PFN_GetDeviceQueue(
			IntPtr device,
			uint queueFamilyIndex,
			uint queueIndex,
			out IntPtr pQueue
		);
		private PFN_GetDeviceQueue vkGetDeviceQueue;

		private delegate VkResult PFN_GetPhysicalDeviceSurfaceSupportKHR(
			IntPtr physicalDevice,
			uint queueFamilyIndex,
			ulong surface,
			out uint pSupported
		);
		private PFN_GetPhysicalDeviceSurfaceSupportKHR vkGetPhysicalDeviceSurfaceSupportKHR;

		private delegate VkResult PFN_GetPhysicalDeviceSurfaceCapabilitiesKHR(
			IntPtr physicalDevice,
			ulong surface,
			out VkSurfaceCapabilitiesKHR surfaceCapabilities
		);
		private PFN_GetPhysicalDeviceSurfaceCapabilitiesKHR vkGetPhysicalDeviceSurfaceCapabilitiesKHR;

		private unsafe delegate VkResult PFN_GetPhysicalDeviceSurfaceFormatsKHR(
			IntPtr physicalDevice,
			ulong surface,
			out uint surfaceFormatCount,
			VkSurfaceFormatKHR* pSurfaceFormats
		);
		private PFN_GetPhysicalDeviceSurfaceFormatsKHR vkGetPhysicalDeviceSurfaceFormatsKHR;

		private unsafe delegate VkResult PFN_GetPhysicalDeviceSurfacePresentModesKHR(
			IntPtr physicalDevice,
			ulong surface,
			out uint pPresentModeCount,
			VkPresentModeKHR* pPresentModes
		);
		private PFN_GetPhysicalDeviceSurfacePresentModesKHR vkGetPhysicalDeviceSurfacePresentModesKHR;

		private delegate void PFN_GetPhysicalDeviceFormatProperties(
			IntPtr physicalDevice,
			VkFormat format,
			out VkFormatProperties properties
		);
		private PFN_GetPhysicalDeviceFormatProperties vkGetPhysicalDeviceFormatProperties;

		private delegate void PFN_DestroySurfaceKHR(
			IntPtr instance,
			ulong surface,
			IntPtr pAllocator
		);
		private PFN_DestroySurfaceKHR vkDestroySurfaceKHR;

		private delegate VkResult PFN_CreateImage(
			IntPtr device,
			ref VkImageCreateInfo pCreateInfo,
			IntPtr pAllocator,
			out ulong image
		);
		private PFN_CreateImage vkCreateImage;

		private delegate VkResult PFN_DestroyImage(
			IntPtr device,
			ulong image,
			IntPtr pAllocator
		);
		private PFN_DestroyImage vkDestroyImage;

		private delegate VkResult PFN_CreateImageView(
			IntPtr device,
			ref VkImageViewCreateInfo pCreateInfo,
			IntPtr pAllocator,
			out ulong view
		);
		private PFN_CreateImageView vkCreateImageView;

		private delegate void PFN_DestroyImageView(
			IntPtr device,
			ulong imageView,
			IntPtr pAllocator
		);
		private PFN_DestroyImageView vkDestroyImageView;

		private unsafe delegate VkResult PFN_CreateSwapchainKHR(
			IntPtr device,
			ref VkSwapchainCreateInfoKHR pCreateInfo,
			IntPtr pAllocator,
			out ulong swapchain
		);
		private PFN_CreateSwapchainKHR vkCreateSwapchainKHR;

		private delegate void PFN_DestroySwapchainKHR(
			IntPtr device,
			ulong swapchain,
			IntPtr pAllocator
		);
		private PFN_DestroySwapchainKHR vkDestroySwapchainKHR;

		private unsafe delegate VkResult PFN_GetSwapchainImagesKHR(
			IntPtr device,
			ulong swapchain,
			out uint pSwapchainImageCount,
			ulong* pSwapchainImages
		);
		private PFN_GetSwapchainImagesKHR vkGetSwapchainImagesKHR;

		private unsafe delegate VkResult PFN_CreateGraphicsPipelines(
			IntPtr device,
			ulong pipelineCache,
			uint createInfoCount,
			VkGraphicsPipelineCreateInfo* pCreateInfos,
			IntPtr pAllocator,
			ulong* pPipelines
		);
		private PFN_CreateGraphicsPipelines vkCreateGraphicsPipelines;

		private delegate VkResult PFN_CreatePipelineLayout(
			IntPtr device,
			ref VkPipelineLayoutCreateInfo pCreateInfo,
			IntPtr pAllocator,
			out ulong pipelineLayout
		);
		private PFN_CreatePipelineLayout vkCreatePipelineLayout;

		private delegate VkResult PFN_AllocateMemory(
			IntPtr device,
			ref VkMemoryAllocateInfo pAllocateInfo,
			IntPtr pAllocator,
			out ulong memory
		);
		private PFN_AllocateMemory vkAllocateMemory;

		private delegate VkResult PFN_BindBufferMemory(
			IntPtr device,
			ulong buffer,
			ulong memory,
			ulong memoryOffset
		);
		private PFN_BindBufferMemory vkBindBufferMemory;

		private delegate VkResult PFN_BindImageMemory(
			IntPtr device,
			ulong image,
			ulong memory,
			ulong memoryOffset
		);
		private PFN_BindImageMemory vkBindImageMemory;

		private unsafe delegate void PFN_CmdCopyBuffer(
			IntPtr commandBuffer,
			ulong srcBuffer,
			ulong dstBuffer,
			uint regionCount,
			VkBufferCopy* pRegions
		);
		private PFN_CmdCopyBuffer vkCmdCopyBuffer;

		private delegate VkResult PFN_CreateBuffer(
			IntPtr device,
			ref VkBufferCreateInfo pCreateInfo,
			IntPtr pAllocator,
			out ulong buffer
		);
		private PFN_CreateBuffer vkCreateBuffer;

		private delegate void PFN_DestroyBuffer(
			IntPtr device,
			ulong buffer,
			IntPtr pAllocator
		);
		private PFN_DestroyBuffer vkDestroyBuffer;

		private unsafe delegate VkResult PFN_FlushMappedMemoryRanges(
			IntPtr device,
			uint memoryRangeCount,
			VkMappedMemoryRange* pMemoryRanges
		);
		private PFN_FlushMappedMemoryRanges vkFlushMappedMemoryRanges;

		private delegate void PFN_FreeMemory(
			IntPtr device,
			ulong memory,
			IntPtr pAllocator
		);
		private PFN_FreeMemory vkFreeMemory;

		private delegate void PFN_GetBufferMemoryRequirements(
			IntPtr device,
			ulong buffer,
			out VkMemoryRequirements memoryRequirements
		);
		private PFN_GetBufferMemoryRequirements vkGetBufferMemoryRequirements;

		private delegate void PFN_GetImageMemoryRequirements(
			IntPtr device,
			ulong image,
			out VkMemoryRequirements memoryRequirements
		);
		private PFN_GetImageMemoryRequirements vkGetImageMemoryRequirements;

		private delegate void PFN_GetPhysicalDeviceMemoryProperties(
			IntPtr physicalDevice,
			out VkPhysicalDeviceMemoryProperties pMemoryProperties
		);
		private PFN_GetPhysicalDeviceMemoryProperties vkGetPhysicalDeviceMemoryProperties;

		private unsafe delegate VkResult PFN_InvalidateMappedMemoryRanges(
			IntPtr device,
			uint memoryRangeCount,
			VkMappedMemoryRange* pMemoryRanges
		);
		private PFN_InvalidateMappedMemoryRanges vkInvalidateMappedMemoryRanges;

		private unsafe delegate VkResult PFN_MapMemory(
			IntPtr device,
			ulong memory,
			ulong offset,
			ulong size,
			uint flags,
			void** ppData
		);
		private PFN_MapMemory vkMapMemory;

		private delegate void PFN_UnmapMemory(
			IntPtr device,
			ulong memory
		);
		private PFN_UnmapMemory vkUnmapMemory;

		private delegate VkResult PFN_CreateFramebuffer(
			IntPtr device,
			ref VkFramebufferCreateInfo pCreateInfo,
			IntPtr pAllocator,
			out ulong framebuffer
		);
		private PFN_CreateFramebuffer vkCreateFramebuffer;

		private delegate void PFN_DestroyFramebuffer(
			IntPtr device,
			ulong framebuffer,
			IntPtr pAllocator
		);
		private PFN_DestroyFramebuffer vkDestroyFramebuffer;

		private delegate VkResult PFN_CreateRenderPass(
			IntPtr device,
			ref VkRenderPassCreateInfo pCreateInfo,
			IntPtr pAllocator,
			out ulong renderPass
		);
		private PFN_CreateRenderPass vkCreateRenderPass;

		private delegate void PFN_DestroyRenderPass(
			IntPtr device,
			ulong renderPass,
			IntPtr pAllocator
		);
		private PFN_DestroyRenderPass vkDestroyRenderPass;

		private unsafe delegate void PFN_CmdClearAttachments(
			IntPtr commandBuffer,
			uint attachmentCount,
			VkClearAttachment* pAttachments,
			uint rectCount,
			VkClearRect* pRects
		);
		private PFN_CmdClearAttachments vkCmdClearAttachments;

		private delegate VkResult PFN_CreateCommandPool(
			IntPtr device,
			ref VkCommandPoolCreateInfo pCreateInfo,
			IntPtr pAllocator,
			out ulong pCommandPool
		);
		private PFN_CreateCommandPool vkCreateCommandPool;

		private unsafe delegate VkResult PFN_AllocateCommandBuffers(
			IntPtr device,
			ref VkCommandBufferAllocateInfo pAllocateInfo,
			IntPtr* pCommandBuffers
		);
		private PFN_AllocateCommandBuffers vkAllocateCommandBuffers;

		private delegate VkResult PFN_BeginCommandBuffer(
			IntPtr commandBuffer,
			ref VkCommandBufferBeginInfo pBeginInfo
		);
		private PFN_BeginCommandBuffer vkBeginCommandBuffer;

		private delegate void PFN_CmdBeginRenderPass(
			IntPtr commandBuffer,
			ref VkRenderPassBeginInfo pRenderPassBegin,
			VkSubpassContents contents
		);
		private PFN_CmdBeginRenderPass vkCmdBeginRenderPass;

		private delegate void PFN_CmdEndRenderPass(
			IntPtr commandBuffer
		);
		private PFN_CmdEndRenderPass vkCmdEndRenderPass;

		private unsafe delegate VkResult PFN_QueueSubmit(
			IntPtr queue,
			uint submitCount,
			VkSubmitInfo* pSubmits,
			ulong fence
		);
		private PFN_QueueSubmit vkQueueSubmit;

		private delegate VkResult PFN_ResetCommandBuffer(
			IntPtr commandBuffer,
			VkCommandBufferResetFlags flags
		);
		private PFN_ResetCommandBuffer vkResetCommandBuffer;

		private delegate VkResult PFN_EndCommandBuffer(
			IntPtr commandBuffer
		);
		private PFN_EndCommandBuffer vkEndCommandBuffer;

		private unsafe delegate VkResult PFN_WaitForFences(
			IntPtr device,
			uint fenceCount,
			ulong* pFences,
			uint waitAll,
			ulong timeout
		);
		private PFN_WaitForFences vkWaitForFences;

		private delegate VkResult PFN_CreateFence(
			IntPtr device,
			ref VkFenceCreateInfo pCreateInfo,
			IntPtr allocator,
			out ulong fence
		);
		private PFN_CreateFence vkCreateFence;

		private delegate VkResult PFN_CreateSemaphore(
			IntPtr device,
			ref VkSemaphoreCreateInfo pCreateInfo,
			IntPtr pAllocator,
			out ulong pSemaphore
		);
		private PFN_CreateSemaphore vkCreateSemaphore;

		private delegate VkResult PFN_AcquireNextImageKHR(
			IntPtr device,
			ulong swapchain,
			ulong timeout,
			ulong semaphore,
			ulong fence,
			out uint pImageIndex
		);
		private PFN_AcquireNextImageKHR vkAcquireNextImageKHR;

		private delegate VkResult PFN_QueuePresentKHR(
			IntPtr queue,
			ref VkPresentInfoKHR pPresentInfo
		);
		private PFN_QueuePresentKHR vkQueuePresentKHR;

		private unsafe delegate void PFN_CmdBlitImage(
			IntPtr commandBuffer,
			ulong srcImage,
			VkImageLayout srcImageLayout,
			ulong dstImage,
			VkImageLayout dstImageLayout,
			uint regionCount,
			VkImageBlit* pRegions,
			VkFilter filter
		);
		private PFN_CmdBlitImage vkCmdBlitImage;

		private delegate void PFN_CmdSetBlendConstants(
			IntPtr commandBuffer,
			float[] blendConstants
		);
		private PFN_CmdSetBlendConstants vkCmdSetBlendConstants;

		private delegate void PFN_CmdSetStencilReference(
			IntPtr commandBuffer,
			VkStencilFaceFlags faceMask,
			uint reference
		);
		private PFN_CmdSetStencilReference vkCmdSetStencilReference;

		private delegate VkResult PFN_CreateDebugUtilsMessengerEXT(
			IntPtr instance,
			ref VkDebugUtilsMessengerCreateInfoEXT pCreateInfo,
			IntPtr pAllocator,
			out ulong pMessenger
		);
		private PFN_CreateDebugUtilsMessengerEXT vkCreateDebugUtilsMessengerEXT;

		private delegate VkResult PFN_DestroyDebugUtilsMessengerEXT(
			IntPtr instance,
			ulong messenger,
			IntPtr pAllocator
		);
		private PFN_DestroyDebugUtilsMessengerEXT vkDestroyDebugUtilsMessengerEXT;

		#endregion

		#region Private Callback Delegates

		private unsafe delegate uint PFN_vkDebugUtilsMessengerCallbackEXT(
			VkDebugUtilsMessageSeverityFlagsEXT messageSeverity,
			VkDebugUtilsMessageTypeFlagsEXT messageType,
			VkDebugUtilsMessengerCallbackDataEXT* pCallbackData,
			IntPtr pUserData
		);

		#endregion
	}
}
